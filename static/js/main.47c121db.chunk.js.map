{"version":3,"sources":["reducers/booleanreducer.js","components/scripts/shared.js","contexts/booleancontext.js","reducers/daypresetreducer.js","contexts/daypresetcontext.js","components/creation/creationselection.js","components/creation/creationselectioninput.js","reducers/schedulereducer.js","contexts/schedulecontext.js","contexts/daynotescontext.js","components/swipebutton.js","components/creation/creationsidebar.js","components/taskblock.js","components/creation/schedulepreview.js","components/checkbox.js","components/creation/subtaskcreator.js","components/creation/taskcreator.js","components/backheader.js","components/creation/main.js","components/schedule/scheduleheader.js","components/schedule/subtaskdisplay.js","components/schedule/currenttaskdisplay.js","components/schedule/booleandisplay.js","components/schedule/booleanlist.js","components/schedule/upcominglist.js","components/schedule/daynotes.js","components/schedule/schedulemain.js","App.js","serviceWorker.js","index.js"],"names":["booleanReducer","state","action","type","boolName","bool","bID","Math","floor","random","pID","isComplete","index","findIndex","value","filter","dateConv","time","today","Date","setHours","Number","substring","setMinutes","disp12Time","timeString","hours","minutes","toString","padStart","checker","isToday","isToday2","date","localStorage","getItem","oldDate","getMonth","getDay","getFullYear","setItem","toDateString","console","log","BooleanContext","createContext","BooleanContextProvider","props","useReducer","localData","JSON","parse","bools","boolsDispatch","useEffect","stringify","Provider","children","DayPresetReducer","presetName","preset","taskList","presetTasks","dpID","DayPresetContext","DayPresetContextProvider","dayPresets","dayDispatch","CreationSelection","useContext","className","onClick","e","preventDefault","deleteSelection","selectionname","CreationSelectionInput","useState","setName","onSubmit","placeholder","name","onChange","target","required","scheduleReducer","task","tID","taskName","startTime","endTime","taskNotes","isCurrent","subtasks","sort","a","b","hoursA","hoursB","minutesA","minutesB","insertByTime","tasks","ind","note","i","length","stIDcheck","sub","stID","stIndex","ScheduleContext","ScheduleContextProvider","dispatch","DayNotesContext","DayNotesContextProvider","initNote","jsonNote","setNote","editNote","newNote","SwipeButton","addClass","id","CreationSidebar","Fragment","map","key","list","swapTasks","sb","document","getElementById","classList","remove","parentNode","add","hideSidebar","cols","rows","defaultValue","TaskBlock","st","stName","SchedulePreview","bar","upbutt","style","display","revealSidebar","CheckBox","SubtaskPreview","subtask","stType","indic","setIndic","goal","indicVal","setIndicVal","checked","min","max","TaskCreator","setStartTime","setEndTime","setNotes","setSubtasks","setstName","hider","x","thisOne","getElementsByClassName","thistwo","createrreveal","thisthree","thisone","matches","getAttribute","hasAttribute","contains","setAttribute","window","matchMedia","addListener","htmlFor","title","pattern","onLoad","revealCreator","BackHeader","to","Main","ScheduleHeader","todayTime","getHours","getMinutes","percent","total","width","SubtaskDisplay","setValue","classes","key2","CurrentDisplay","currentIndex","curr","tid","currentName","markText","change","BooleanDisplay","bName","BooleanList","notes","unswapBottom","UpcomingList","DayNotes","swapBottom","ScheduleMain","setDate","boolist","uplist","curtask","dayNo","timerID","setInterval","clearInterval","addEventListener","App","baseline","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAAaA,EAAiB,SAACC,EAAOC,GACpC,OAAQA,EAAOC,MACb,IAAK,WACH,MAAM,GAAN,mBACKF,GADL,CAEE,CACEG,SAAUF,EAAOG,KAAKD,SACtBE,IAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UACrBC,IAAK,EACLC,YAAY,KAGlB,IAAK,cACH,IAAIC,EAAQX,EAAMY,WAAU,SAACR,GAAD,OAAUA,EAAKC,MAAQJ,EAAOG,KAAKA,KAAKC,OAGpE,OADAL,EAAMW,GAAOD,YAAcT,EAAOG,KAAKS,MAChC,YAAIb,GACb,IAAK,cACH,OAAOA,EAAMc,QAAO,SAACV,GAAD,OAAUA,EAAKC,MAAQJ,EAAOI,OACpD,QACE,OAAOL,ICpBAe,EAAW,SAACC,GACvB,IAAIC,EAAQ,IAAIC,KAGhB,OAFAD,EAAME,SAASC,OAAOJ,EAAKK,UAAU,EAAG,KACxCJ,EAAMK,WAAWF,OAAOJ,EAAKK,UAAU,EAAG,KACnCJ,GAEIM,EAAa,SAACC,GACzB,IAAIC,EAAQL,OAAOI,EAAWH,UAAU,EAAG,IACvCK,EAAUN,OAAOI,EAAWH,UAAU,EAAG,IAK7C,OAJIK,EAAU,KACZA,GAAW,IAEbA,EAAUA,EAAQC,WAAWC,SAAS,EAAG,KACrCH,EAAQ,IAAMA,GAAS,IACzBA,GAAS,IACa,IAAMC,EAAU,MAGpCD,EAAQ,KACVA,GAAS,IAGG,KAAVA,EACYA,EAAQ,IAAMC,EAAU,MAG1B,IAAVD,IACFA,EAAQ,IAEIA,EAAQ,IAAMC,EAAU,QAO7BG,GAFM,IAAIX,MAEA,GAERY,EAAU,WACrB,QAAKD,IACHA,GAAU,EACHE,MAMLA,EAAW,WACf,IAAMC,EAAOC,aAAaC,QAAQ,QAC9BjB,EAAQ,IAAIC,KACZiB,EAAUH,EAAO,IAAId,KAAKc,GAAQ,IAAId,KAC1C,OACEiB,EAAQC,WAAanB,EAAMmB,YAC3BD,EAAQE,SAAWpB,EAAMoB,UACzBF,EAAQG,cAAgBrB,EAAMqB,eAE9BL,aAAaM,QAAQ,OAAQtB,EAAMuB,gBACnCP,aAAaM,QAAQ,QAAS,IAC9BN,aAAaM,QAAQ,QAAS,IAC9BN,aAAaM,QAAQ,OAAQ,IAC7BE,QAAQC,IAAI,kBACZD,QAAQC,IAAR,sBAA2BP,KACpB,IAEPM,QAAQC,IAAI,iBACZT,aAAaM,QAAQ,OAAQtB,EAAMuB,iBAC5B,IC/DEG,EAAiBC,0BAkBfC,EAhBgB,SAACC,GAAW,IAAD,EACTC,qBAAWhD,EAAgB,IAAI,WAC5D,IAAMiD,EAAYf,aAAaC,QAAQ,SACvC,OAAOc,GAAalB,IAAYmB,KAAKC,MAAMF,GAAa,MAHlB,mBACjCG,EADiC,KAC1BC,EAD0B,KASxC,OAJAC,qBAAU,WACRpB,aAAaM,QAAQ,QAASU,KAAKK,UAAUH,IAC7CV,QAAQC,IAAR,gCAAqCO,KAAKK,UAAUH,OACnD,CAACA,IAEF,kBAACR,EAAeY,SAAhB,CAAyB1C,MAAO,CAAEsC,QAAOC,kBACtCN,EAAMU,WChBAC,EAAmB,SAACzD,EAAOC,GAEtC,OAAQA,EAAOC,MACb,IAAK,aACH,MAAa,sBACRF,GADQ,CAEX,CACE0D,WAAYzD,EAAO0D,OAAOD,WAC1BE,SAAU3D,EAAO0D,OAAOE,YACxBC,KAAMxD,KAAKC,MAAsB,IAAhBD,KAAKE,aAI5B,IAAK,gBACH,OAAOR,EAAMc,QAAO,SAAC6C,GAAD,OAAYA,EAAOG,OAAS7D,EAAO6D,QACzD,IAAK,gBACH,OAAO,YAAI9D,GACb,QACE,OAAOA,IChBA+D,EAAmBnB,0BAkBjBoB,EAhBkB,SAAClB,GAAW,IAAD,EACRC,qBAAWU,EAAkB,IAAI,WACjE,IAAMT,EAAYf,aAAaC,QAAQ,cACvC,OAAOc,EAAYC,KAAKC,MAAMF,GAAa,MAHH,mBACnCiB,EADmC,KACvBC,EADuB,KAS1C,OAJAb,qBAAU,WACRpB,aAAaM,QAAQ,aAAcU,KAAKK,UAAUW,IAClDxB,QAAQC,IAAR,qCAA0CO,KAAKK,UAAUW,OACxD,CAACA,IAEF,kBAACF,EAAiBR,SAAlB,CAA2B1C,MAAO,CAAEoD,aAAYC,gBAC7CpB,EAAMU,WCaEW,MAxBf,SAA2BrB,GAAO,IAExBM,EAAkBgB,qBAAWzB,GAA7BS,cACAc,EAAgBE,qBAAWL,GAA3BG,YASR,OACE,yBAAKG,UAAU,qBACb,4BAAQA,UAAU,eAAeC,QAAS,SAACC,GAAD,OAV9C,SAAyBA,GACvBA,EAAEC,iBACE1B,EAAM1C,KACRgD,EAAc,CAAElD,KAAM,cAAeG,IAAKyC,EAAM1C,KAAKC,MAC5CyC,EAAMa,QACfO,EAAY,CAAEhE,KAAM,gBAAiB4D,KAAMhB,EAAMa,OAAOG,OAKPW,CAAgBF,KAAjE,KAGA,uBAAGF,UAAU,gBAAgBC,QAASxB,EAAMwB,SACzCxB,EAAM4B,iBCYAC,MA/Bf,SAAgC7B,GAAQ,IAC9BM,EAAkBgB,qBAAWzB,GAA7BS,cAD6B,EAETwB,mBAAS,IAFA,mBAE9BzE,EAF8B,KAEpB0E,EAFoB,KAarC,OACE,yBAAKR,UAAU,qBACb,0BAAMS,SAZW,SAACP,GACpBA,EAAEC,iBACFpB,EAAc,CACZlD,KAAM,WACNE,KAAM,CACJD,cAGJ0E,EAAQ,MAKJ,2BACER,UAAU,iBACVU,YAAY,MACZ7E,KAAK,OACL8E,KAAK,WACLnE,MAAOV,EACP8E,SAAU,SAACV,GAAD,OAAOM,EAAQN,EAAEW,OAAOrE,QAClCsE,UAAQ,IAEV,2BAAOjF,KAAK,SAASW,MAAM,IAAIwD,UAAU,oBC5BpCe,EAAkB,SAACpF,EAAOC,GACrC,IAAIU,EAAQX,EAAMY,WAAU,SAACyE,GAAD,OAAUA,EAAKC,MAAQrF,EAAOoF,KAAKC,OAC/D,OAAQrF,EAAOC,MACb,IAAK,WACH,OAkCN,SAAsBF,EAAOqF,GA8B3B,OA7BArF,EAAK,sBACAA,GADA,CAEH,CACEuF,SAAUF,EAAKE,SACfD,IAAKhF,KAAKC,MAAsB,IAAhBD,KAAKE,UACrBC,IAAK,EACL+E,UAAWH,EAAKG,UAChBC,QAASJ,EAAKI,QACd/E,YAAY,EACZgF,UAAWL,EAAKK,UAChBC,WAAW,EACXC,SAAUP,EAAKO,aAGbC,MAAK,SAAUC,EAAGC,GACtB,IAAIC,EAAS5E,OAAO0E,EAAEN,UAAUnE,UAAU,EAAG,IACzC4E,EAAS7E,OAAO2E,EAAEP,UAAUnE,UAAU,EAAG,IACzC6E,EAAW9E,OAAO0E,EAAEN,UAAUnE,UAAU,EAAG,IAC3C8E,EAAW/E,OAAO2E,EAAEP,UAAUnE,UAAU,EAAG,IAE/C,OAAI2E,EAASC,GAAWD,IAAWC,GAAUC,EAAWC,GAC9C,EAENF,EAASD,EACJ,EAGF,KAEF,YAAIhG,GAhEAoG,CAAapG,EAAOC,EAAOoF,MACpC,IAAK,gBACH,OAAO,YAAIpF,EAAOoG,OACpB,IAAK,cACH,OAAOrG,EAAMc,QAAO,SAACuE,GAAD,OAAUA,EAAKC,MAAQrF,EAAOoF,KAAKC,OACzD,IAAK,cAEH,OADAtF,EAAMW,GAAOD,YAAcV,EAAMW,GAAOD,WACjC,YAAIV,GACb,IAAK,iBAEH,OADAA,EAAMC,EAAOoF,KAAKiB,KAAKZ,UAAYzF,EAAOoF,KAAKkB,KACxC,YAAIvG,GACb,IAAK,eACH,IAAK,IAAIwG,EAAI,EAAGA,EAAIxG,EAAMyG,OAAQD,IAC5BA,IAAM7F,EACRX,EAAMW,GAAOgF,WAAY,EAEzB3F,EAAMwG,GAAGb,WAAY,EAIzB,OADAlD,QAAQC,IAAI,iBACL,YAAI1C,GACb,IAAK,aACH,IAAI0G,EAAYzG,EAAOoF,KAAKsB,IAAIC,KAC5BC,EAAU7G,EAAMW,GAAOiF,SAAShF,WAClC,SAAC+F,GAAD,OAASA,EAAIC,OAASF,KAGxB,OADA1G,EAAMW,GAAOiF,SAASiB,GAASnG,YAAcT,EAAOoF,KAAKxE,MAClD,YAAIb,GACb,QACE,OAAOA,IC7BN,IAAM8G,EAAkBlE,0BAwBhBmE,EAtBiB,SAACjE,GAAW,IAAD,EACfC,qBAAWqC,EAAiB,IAAI,WACxD,IAAMpC,EAAYf,aAAaC,QAAQ,SAIvC,OAAOc,GAAalB,IAAYmB,KAAKC,MAAMF,GAAa,MANjB,mBAClCqD,EADkC,KAC3BW,EAD2B,KAezC,OAPA3D,qBAAU,WACJvB,IACFG,aAAaM,QAAQ,QAASU,KAAKK,UAAU+C,IAE7CpE,aAAaM,QAAQ,QAAS,MAE/B,CAAC8D,IAEF,kBAACS,EAAgBvD,SAAjB,CAA0B1C,MAAO,CAAEwF,QAAOW,aACvClE,EAAMU,WCpBAyD,EAAkBrE,0BAuBhBsE,EArBiB,SAACpE,GAC/B,IAAIqE,EAAWlF,aAAaC,QAAQ,QAChCkF,EACFD,GAAYrF,IACRmB,KAAKC,MAAMiE,GACX,CAAC,CAAEZ,KAAM,oBAL0B,EAMjB3B,mBAASwC,GANQ,mBAMlCb,EANkC,KAM5Bc,EAN4B,KAczC,OAHAhE,qBAAU,WACRpB,aAAaM,QAAQ,OAAQU,KAAKK,UAAUiD,MAC3C,CAACA,IAEF,kBAACU,EAAgB1D,SAAjB,CAA0B1C,MAAO,CAAE0F,OAAMe,SAR1B,SAACC,GAChBF,EAAQ,CAAC,CAAEd,KAAMgB,QAQdzE,EAAMU,WCPEgE,MAZf,SAAqB1E,GACnB,OACE,yBACEuB,UAAS,sBAAiBvB,EAAM2E,UAChCnD,QAASxB,EAAMwB,QACfoD,GAAI5E,EAAM4E,IAEV,0BAAMrD,UAAU,QAAhB,UC0GSsD,MA1Gf,WAA4B,IAAD,EACGvD,qBAAW0C,GAA/BT,EADiB,EACjBA,MAAOW,EADU,EACVA,SACP7D,EAAUiB,qBAAWzB,GAArBQ,MAFiB,EAGWiB,qBAAWL,GAAvCE,EAHiB,EAGjBA,WAAYC,EAHK,EAGLA,YAHK,EAIEE,qBAAW6C,GAA9BV,EAJiB,EAIjBA,KAAMe,EAJW,EAIXA,SA0Bd,OACE,kBAAC,IAAMM,SAAP,KACE,yBAAKvD,UAAU,UAAUqD,GAAG,mBAC1B,yBAAKA,GAAG,gBACN,yBAAKrD,UAAU,gBACb,uBAAGA,UAAU,aAAb,qBACA,yBAAKA,UAAU,eACZJ,EAAW4D,KAAI,SAAClE,GACf,OACE,kBAAC,EAAD,CACEe,cAAef,EAAOD,WACtBC,OAAQA,EACRmE,IAAKnE,EAAOG,KACZQ,QAAS,SAACC,IA5BV,SAACA,EAAGwD,GACpBxD,EAAEC,iBACFwC,EAAS,CACP9G,KAAM,gBACNmG,MAAO0B,EACP1C,KAAM,IAwBU2C,CAAUzD,EAAGZ,EAAOC,iBAM9B,4BAAQ8D,GAAG,qBAAqBpD,QA7CrB,SAACC,GACpBA,EAAEC,iBACFN,EAAY,CACVhE,KAAM,aACNyD,OAAQ,CACND,YAAY,IAAIxC,MAAOsB,eACvBqB,YAAawC,OAuCT,+BAuBF,kBAAC,EAAD,CAAaqB,GAAG,YAAYpD,QAAS,SAACwB,GAAD,OAlDzB,SAACA,GACnB,IAAImC,EAAKC,SAASC,eAAe,cACpBD,SAASC,eAAe,iBAC9BC,UAAUC,OAAO,QACxBvC,EAAEZ,OAAOoD,WAAWA,WAAWA,WAAWF,UAAUG,IAAI,QACxDN,EAAGG,UAAUC,OAAO,QA6C8BG,CAAY1C,MACxD,yBAAKzB,UAAU,gBACb,uBAAGA,UAAU,aAAb,mBACA,yBAAKA,UAAU,eACZlB,EAAM,GACL,4BACGA,EAAM0E,KAAI,SAACzH,GACV,OACE,kBAAC,EAAD,CACEsE,cAAetE,EAAKD,SACpB2H,IAAK1H,EAAKC,IACVD,KAAMA,QAKZ,KACJ,kBAAC,EAAD,CAAwBH,OAAO,eAGnC,8BACEwI,KAAK,KACLC,KAAK,IACLrE,UAAU,WACVY,SAAU,SAACV,GAAD,OAAO+C,EAAS/C,EAAEW,OAAOrE,QACnC8H,aAAcpC,EAAK,GAAKA,EAAK,GAAGA,KAAO,WC/DpCqC,MAxCf,YAA8B,IAATvD,EAAQ,EAARA,KACX2B,EAAa5C,qBAAW0C,GAAxBE,SACR,OAAO3B,EACL,yBAAKhB,UAAU,aACb,4BACEA,UAAU,eACVC,QAAS,kBACP0C,EAAS,CAAE9G,KAAM,cAAemF,KAAM,CAAEC,IAAKD,EAAKC,SAHtD,KAQA,uBAAGjB,UAAU,YAAYgB,EAAKE,UAC9B,yBAAKlB,UAAU,QACb,uBAAGA,UAAU,SAAS9C,EAAW8D,EAAKG,YACtC,2BAAIjE,EAAW8D,EAAKI,WAErBJ,EAAKO,SAAS,GACb,yBAAKvB,UAAU,WACb,wBAAIA,UAAU,cACZ,0BAAMA,UAAU,SAASyD,IAAKxH,KAAKC,MAAsB,IAAhBD,KAAKE,WAC3C6E,EAAKO,SAASiC,KAAI,SAACgB,GAClB,OACE,0BACExE,UAAU,aACVyD,IAAKxH,KAAKC,MAAsB,IAAhBD,KAAKE,WAEpBqI,EAAGC,OACH,YAOX,MAEJ,MCRSC,EA5BS,SAACxE,GAAO,IACtB8B,EAAUjC,qBAAW0C,GAArBT,MASR,OACE,yBAAKhC,UAAU,4BACb,yBAAKA,UAAU,mBACb,wBAAIqD,GAAG,eACJrB,EAAMwB,KAAI,SAACxC,GACV,OAAO,kBAAC,EAAD,CAAWA,KAAMA,EAAMyC,IAAKzC,EAAKC,WAI9C,kBAAC,EAAD,CACEoC,GAAG,aACHD,SAAS,UACTnD,QAAS,SAACwB,GAAD,OApBO,SAACA,GACrB,IAAIkD,EAAMd,SAASC,eAAe,mBAC9Bc,EAASf,SAASC,eAAe,iBACrCa,EAAIZ,UAAUC,OAAO,QACrBW,EAAIE,MAAMC,QAAU,QACpBrD,EAAEZ,OAAOoD,WAAWF,UAAUG,IAAI,QAClCU,EAAOb,UAAUG,IAAI,QAcDa,CAActD,QCVvBuD,MAff,SAAkBvG,GAIhB,OACE,yBACEuB,UAAS,mBAAcvB,EAAMjC,MAAQ,UAAY,aACjDyD,QANS,WACXxB,EAAMwB,WAMJoD,GAAI5E,EAAM4E,IAEV,0BAAMrD,UAAU,SAASvB,EAAMjC,MAAQ,SAAM,YC8CpCyI,MAtDf,SAAwBxG,GAAQ,IACtBkE,EAAa5C,qBAAW0C,GAAxBE,SADqB,EAELpC,mBAAS9B,EAAMyG,QAAQT,QAFlB,mBAEtB9D,EAFsB,KAEhBH,EAFgB,OAGHD,mBAAS9B,EAAMyG,QAAQC,QAHpB,mBAGtBC,EAHsB,KAGfC,EAHe,OAIG9E,mBAAS9B,EAAMyG,QAAQI,MAJ1B,mBAItBC,EAJsB,KAIZC,EAJY,KAK7B,OACE,yBAAKxF,UAAU,kBACb,yBAAKA,UAAU,uBACb,2BACEA,UAAU,qCACVxD,MAAOmE,EACPC,SAAU,SAACV,GAAD,OAAOM,EAAQN,EAAEW,OAAOrE,QAClCX,KAAK,SAEP,2BAAOmE,UAAU,SAASqD,GAAG,gBAC3B,2BACExH,KAAK,WACL8E,KAAK,aACLC,SAAU,SAACV,GAAD,OAAOmF,GAAUD,IAC3BpF,UAAU,QACVyF,QAASL,IAEX,0BAAMpF,UAAU,YAEjBoF,EACC,2BACEvJ,KAAK,SACL8E,KAAK,WACLC,SAAU,SAACV,GAAD,OAAOsF,EAAYtF,EAAEW,OAAOrE,QACtCA,MAAO+I,EACPG,IAAK,EACLC,IAAK,MAGP,kBAAC,EAAD,CACE9J,KAAK,WACLmE,UAAU,QACVC,QAAS,kBAAM,GACfzD,OAAO,IAGX,0BACEwD,UAAU,QACVC,QAAS,kBACP0C,EAAS,CAAE9G,KAAM,aAAc0G,KAAM9D,EAAMyG,QAAQ3C,SAHvD,QC+NOqD,MAtQf,WAAwB,IACdjD,EAAa5C,qBAAW0C,GAAxBE,SADa,EAEOpC,mBAAS,IAFhB,mBAEdW,EAFc,KAEJV,EAFI,OAGaD,mBAAS,IAHtB,mBAGdY,EAHc,KAGH0E,EAHG,OAIStF,mBAAS,IAJlB,mBAIda,EAJc,KAIL0E,EAJK,OAKSvF,mBAAS,IALlB,mBAKdc,EALc,KAKH0E,EALG,OAMWxF,mBAAS,IANpB,mBAMdgB,EANc,KAMJyE,EANI,OAOOzF,mBAAS,IAPhB,mBAOdkE,EAPc,KAONwB,EAPM,OAQK1F,oBAAS,GARd,mBAQd6E,EARc,KAQPC,EARO,OASW9E,mBAAS,GATpB,mBASdgF,EATc,KASJC,EATI,KAgCrB,SAASU,EAAMC,GACb,IAAIC,EAAUvC,SAASwC,uBACrB,oCAGEC,EAAUzC,SAASwC,uBAAuB,WAC1CE,EAAgB1C,SAASC,eAAe,iBACxC0C,EAAY3C,SAASwC,uBAAuB,cAC5CI,EAAO,sBAAOL,GAAP,YAAmBE,GAAnB,YAA+BE,IAC1C,IACEL,EAAEO,SACwC,UAAzCH,EAAcI,aAAa,WACzBJ,EAAcK,aAAa,UAe9B,IAAK,IAAIzE,EAAI,EAAGA,EAAIsE,EAAQrE,OAAQD,IAE9BsE,EAAQtE,GAAG4B,UAAU8C,SAAS,SAChCJ,EAAQtE,GAAG4B,UAAUC,OAAO,YAjBhC,CACA,IAAK,IAAI7B,EAAI,EAAGA,EAAIsE,EAAQrE,OAAQD,IAG7BsE,EAAQtE,GAAG4B,UAAU8C,SAAS,SACjCJ,EAAQtE,GAAG4B,UAAUG,IAAI,QAO7BqC,EAAcO,aAAa,SAAU,UAWzC,IAmCIX,EAAIY,OAAOC,WAAW,sBAuB1B,OArBAb,EAAEc,YAAYf,GACdlH,qBAAU,WACRkH,EAAMC,MAoBN,kBAAC,IAAM5C,SAAP,KACE,0BAAM9C,SArHW,SAACP,GACpBA,EAAEC,iBACFwC,EAAS,CACP9G,KAAM,WACNmF,KAAM,CACJE,WACAC,YACAC,UACAC,YACAE,cAGJf,EAAQ,IACRqF,EAAa,IACbC,EAAW,IACXC,EAAS,WACTC,EAAY,IACZX,GAAS,GACTG,EAAY,GACZS,EAAU,MAmGN,yBAAK5C,GAAG,eACN,yBAAKrD,UAAU,UACb,6BACE,2BACEA,UAAU,kCACVU,YAAY,YACZ7E,KAAK,OACLW,MAAO0E,EACPN,SAAU,SAACV,GAAD,OAAOM,EAAQN,EAAEW,OAAOrE,QAClCmE,KAAK,WACLG,UAAQ,IAEV,2BAAOuC,GAAG,gBAAgB6D,QAAQ,YAAlC,cAIF,yBAAK7D,GAAG,YAAYrD,UAAU,UAC5B,6BACE,2BAAOkH,QAAQ,YAAYlH,UAAU,aAArC,cAGA,2BACEA,UAAU,8BACVnE,KAAK,OACL6E,YAAY,QACZC,KAAK,YACLC,SAAU,SAACV,GAAD,OAAO2F,EAAa3F,EAAEW,OAAOrE,QACvCA,MAAO2E,EACPgG,MAAM,0BACNC,QAAQ,oBACRtG,UAAQ,KAGZ,6BACE,2BAAOoG,QAAQ,UAAUlH,UAAU,aAAnC,YAGA,2BACEA,UAAU,8BACVnE,KAAK,OACL8E,KAAK,UACLC,SAAU,SAACV,GAAD,OAAO4F,EAAW5F,EAAEW,OAAOrE,QACrCA,MAAO4E,EACPV,YAAY,QACZ0G,QAAQ,oBACRD,MAAM,0BACNzB,IAAKvE,EACLL,UAAQ,MAId,yBAAKd,UAAU,UACZuB,EAAS,GACR,4BACGA,EAASiC,KAAI,SAAClB,GACb,OACE,kBAAC,EAAD,CACEmC,OAAQnC,EAAImC,OACZhB,IAAKnB,EAAIC,KACT2C,QAAS5C,QAKf,MAEN,6BACE,2BACEtC,UAAU,6CACVU,YAAY,eACZ7E,KAAK,OACL+E,SAAU,SAACV,GAAD,OAAO+F,EAAU/F,EAAEW,OAAOrE,QACpCA,MAAOiI,EACP9D,KAAK,gBAEP,2BAAOX,UAAU,mBAAmBkH,QAAQ,eAA5C,iBAIF,yBAAKlH,UAAU,cACb,2BAAOA,UAAU,SAASqD,GAAG,gBAC3B,2BACExH,KAAK,WACL8E,KAAK,aACLC,SAAU,SAACV,GAAD,OAAOmF,GAAUD,IAC3BpF,UAAU,QACVyF,QAASL,IAEX,0BAAMpF,UAAU,YAEjBoF,EACC,2BACEvJ,KAAK,SACL8E,KAAK,WACLC,SAAU,SAACV,GAAD,OAAOsF,EAAYtF,EAAEW,OAAOrE,QACtCA,MAAO+I,EACPG,IAAK,EACLC,IAAK,MAGP,kBAAC,EAAD,CACE9J,KAAK,WACLmE,UAAU,QACVC,QAAS,kBAAM,GACfzD,OAAO,IAGX,0BAAMyD,QA/HJ,SAACC,GACb8F,EAAY,GAAD,mBACNzE,GADM,CAET,CACEkD,SACAU,OAAQC,EACRE,KAAMC,EACNhD,KAAMtG,KAAKC,MAAsB,IAAhBD,KAAKE,UACtBK,MAAO,EACPH,YAAY,MAGhBgJ,GAAS,GACTG,EAAY,GACZS,EAAU,KAiHsBjG,UAAU,SAAhC,OAKJ,8BACEqH,OAAQ,kBAAMnB,EAAMa,OAAOC,WAAW,wBACtC5C,KAAK,KACLC,KAAK,IACLrE,UAAU,mCACVY,SAAU,SAACV,GAAD,OAAO6F,EAAS7F,EAAEW,OAAOrE,QACnCA,MAAO6E,IAGT,2BAAOxF,KAAK,SAASW,MAAM,IAAI6G,GAAG,iBAGtC,kBAAC,EAAD,CACEA,GAAG,gBACHD,SAAS,MACTnD,QAAS,SAACwB,GAAD,OA5LO,SAACA,GACrB,IAAI2E,EAAUvC,SAASwC,uBACrB,oCAEEC,EAAUzC,SAASwC,uBAAuB,WAC1CE,EAAgB1C,SAASC,eAAe,iBACxC0C,EAAY3C,SAASwC,uBAAuB,cAC5CI,EAAO,sBAAOL,GAAP,YAAmBE,GAAnB,YAA+BE,IAC1C,IACEL,EAAEO,SACwC,UAAzCH,EAAcI,aAAa,WACzBJ,EAAcK,aAAa,UAazB,CACL,IAAK,IAAIzE,EAAI,EAAGA,EAAIsE,EAAQrE,OAAQD,IAE7BsE,EAAQtE,GAAG4B,UAAU8C,SAAS,SACjCJ,EAAQtE,GAAG4B,UAAUG,IAAI,QAI7BqC,EAAcO,aAAa,SAAU,aApBrC,CACA,IAAK,IAAI3E,EAAI,EAAGA,EAAIsE,EAAQrE,OAAQD,IAE9BsE,EAAQtE,GAAG4B,UAAU8C,SAAS,SAChCJ,EAAQtE,GAAG4B,UAAUC,OAAO,QAOhCuC,EAAcO,aAAa,SAAU,SAqKnBQ,Q,OCtPTC,MAbf,WACE,IAAI3K,EAAQ,IAAIC,KAEhB,OADAD,EAAQA,EAAMuB,eAEZ,yBAAK6B,UAAU,cACb,0BAAMqD,GAAG,WAAWzG,GACpB,kBAAC,IAAD,CAAMoD,UAAU,gBAAgBwH,GAAG,gBAAnC,cC0BSC,MA1Bf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,IAAMlE,SAAP,KACE,yBAAKvD,UAAU,WACb,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,UAMR,yBAAKA,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,WC+BG0H,MArDf,SAAwBjJ,GAAQ,IACtBuD,EAAUjC,qBAAW0C,GAArBT,MACJ2F,EAAYzK,EACduB,EAAM9B,KAAKiL,WAAWtK,WAAWC,SAAS,EAAG,KAC3C,IACAkB,EAAM9B,KAAKkL,aAAavK,WAAWC,SAAS,EAAG,MAE/CjB,EAAQ0F,EAAMzF,WAChB,SAACyE,GAAD,OACEtE,EAASsE,EAAKG,WAAWlE,WACvBP,EAASsE,EAAKG,WAAW0G,aAAe,IACrCpJ,EAAM9B,MAAQD,EAASsE,EAAKI,UAAY3C,EAAM9B,QAEnDmL,EAAU,EACd,GAAI9F,EAAM1F,GAAQ,CAChB,IAAIyL,EACFrL,EAASsF,EAAM1F,GAAO8E,SACtB1E,EAASsF,EAAM1F,GAAO6E,WAAWlE,WAC/BP,EAASsF,EAAM1F,GAAO6E,WAAW0G,aAAe,GAOpDC,GAJErJ,EAAM9B,KACND,EAASsF,EAAM1F,GAAO6E,WAAWlE,WAC/BP,EAASsF,EAAM1F,GAAO6E,WAAW0G,aAAe,IAElCE,EAAS,IAE7B,OACE,kBAAC,IAAMxE,SAAP,KACE,yBAAKvD,UAAU,kBACb,yBAAKA,UAAU,aACb,0BAAMqD,GAAG,SACNrB,EAAM1F,GAASY,EAAW8E,EAAM1F,GAAO6E,WAAa,IAEvD,0BAAMkC,GAAG,sBAAsBsE,GAC/B,0BAAMtE,GAAG,SACNrB,EAAM1F,GAASY,EAAW8E,EAAM1F,GAAO8E,SAAW,KAGvD,yBAAKpB,UAAU,YACb,8BAAOvB,EAAM9B,KAAKwB,gBAClB,kBAAC,IAAD,CAAM6B,UAAU,QAAQwH,GAAG,KAA3B,qBAIF,yBAAKnE,GAAG,eACN,yBAAKA,GAAG,WAAWwB,MAAO,CAAEmD,MAAM,GAAD,OAAKF,EAAL,YCF5BG,MA7Cf,SAAwBxJ,GAAQ,IACtBkE,EAAa5C,qBAAW0C,GAAxBE,SADqB,EAEHpC,mBAAS9B,EAAM6D,IAAI9F,OAFhB,mBAEtBA,EAFsB,KAEf0L,EAFe,KAGzBC,EAAU,kBAAoB1J,EAAM6D,IAAIjG,WAAa,YAAc,IAavE,OACE,yBAAK2D,UAAWmI,EAAS1E,IAAKhF,EAAM6D,IAAIC,KAAM6F,KAAM3J,EAAM6D,IAAIC,MAC5D,kBAAC,EAAD,CACE1G,KAAK,WACLmE,UAAU,QACVC,QAhBN,WACE0C,EAAS,CACP9G,KAAM,aACNmF,KAAM,CACJsB,IAAK7D,EAAM6D,IACXrB,IAAKxC,EAAMuC,KAAKC,IAChBzE,MAAOiC,EAAM6D,IAAIjG,cAGrB8L,EAAU,kBAAoB1J,EAAM6D,IAAIjG,WAAa,YAAc,KAQ/DG,MAAOiC,EAAM6D,IAAIjG,aAEnB,uBAAG2D,UAAU,WAAWvB,EAAMgG,QAE7BhG,EAAM6D,IAAI6C,OACT,6BACE,2BACEnF,UAAU,YACVnE,KAAK,SACL8E,KAAK,WACLC,SAAU,SAACV,GAAD,OAAOgI,EAAShI,EAAEW,OAAOrE,QACnCA,MAAOA,GAAgB,EACvBkJ,IAAK,EACLC,IAAKlH,EAAM6D,IAAIgD,OAGjB,kCAAQ7G,EAAM6D,IAAIgD,OAElB,OCmFK+C,MAjHf,SAAwB5J,GAAQ,IAAD,EACDsB,qBAAW0C,GAA/BT,EADqB,EACrBA,MAAOW,EADc,EACdA,SACX2F,EAAetG,EAAMzF,WACvB,SAACyE,GAAD,OACEtE,EAASsE,EAAKG,WAAWlE,WACvBP,EAASsE,EAAKG,WAAW0G,aAAe,IACrCpJ,EAAM9B,MAAQD,EAASsE,EAAKI,UAAY3C,EAAM9B,QAN1B,EASL4D,mBACtB+H,GAAgB,EAAItG,EAAMsG,EAAajH,WAAa,IAVzB,mBAStBa,EATsB,KAShBc,EATgB,KAwC7B,GAAIsF,GAAgB,EAAG,CACrB,IAAIC,EAAO1E,SAASC,eAAe,mBAC9B9B,EAAMsG,GAAc/G,UAAYgH,EACnCA,EAAKxE,UAAUG,IAAI,SACVqE,GACTA,EAAKxE,UAAUC,OAAO,SAG1B,OACE,yBAAKX,GAAG,iBAAiBrD,UAAU,SACjC,yBAAKqD,GAAG,kBACN,wBAAIrD,UAAU,UACZ,wBACEqD,GAAG,qBACHrD,UACEgC,EAAMsG,IACFtG,EAAMsG,GAAcjM,WAClB,WAEF,IAGL2F,EAAMsG,GAAgBtG,EAAMsG,GAAcpH,SAAW,UAGzDoH,GAAgB,EACf,4BACEjF,GAAG,eACHpD,QAAS,WArCA,IAACuI,GARpB,WACE,IAAIC,EAAc5E,SAASC,eAAe,sBACZ,KAA1B2E,EAAYzI,UACdyI,EAAYzI,UAAY,WAExByI,EAAYzI,UAAY,GAyChB0I,GAtCQF,EAuCGxG,EAAMsG,GAAcrH,IAtCzC7C,QAAQC,IAAImK,GACZ7F,EAAS,CACP9G,KAAM,cACNmF,KAAM,CACJC,IAAKuH,KAoCCpK,QAAQC,IAAI,oBANhB,iBAWE,MAEN,yBAAKgF,GAAG,oBACLiF,GAAgB,GACbtG,EAAMsG,GAAc/G,SAClBS,EAAMsG,GAAc/G,SAASiC,KAAI,SAAC0B,GAChC,OACE,kBAAC,EAAD,CACE5C,IAAK4C,EACLzB,IAAKyB,EAAQ3C,KACbkC,OAAQS,EAAQT,OAChBzD,KAAMgB,EAAMsG,QAKpB,MAEN,yBAAKjF,GAAG,uBACN,8BACErD,UAAU,kBACVsE,aACEtC,EAAMsG,IAAiB,EACnBtG,EAAMsG,GAAcjH,UACpB,cAENT,SACE0H,GAAgB,EAAI,SAACpI,GAAD,OA3FVyI,EA2F4BzI,EAAEW,OAAOrE,MA1FvDwG,EAAQ2F,QACRhG,EAAS,CACP9G,KAAM,iBACNmF,KAAM,CACJkB,KAAMA,EACND,IAAKqG,KANQ,IAACK,GA2F8C,QAI9D,kBAAC,EAAD,CAAa1I,QAAS,kBAlHf4D,SAASC,eAAe,gBAC9BC,UAAUC,OAAO,aACXH,SAASC,eAAe,kBAC9BC,UAAUG,IAAI,SA+GwBd,SAAS,YC3FvCwF,MA3Bf,SAAwBnK,GAAQ,IACtBM,EAAkBgB,qBAAWzB,GAA7BS,cACJoJ,EAAU,kBAAoB1J,EAAM1C,KAAKM,WAAa,YAAc,IAYxE,OACE,yBAAK2D,UAAWmI,EAAS1E,IAAKhF,EAAMzC,IAAKoM,KAAM3J,EAAMzC,KACnD,kBAAC,EAAD,CACEH,KAAK,WACLmE,UAAU,QACVC,QAfN,WACElB,EAAc,CACZlD,KAAM,cACNE,KAAM,CACJA,KAAM0C,EAAM1C,KACZS,MAAOiC,EAAM1C,KAAKM,cAGtB8L,EAAU,kBAAoB1J,EAAM1C,KAAKM,WAAa,YAAc,KAQhEG,MAAOiC,EAAM1C,KAAKM,aAEpB,uBAAG2D,UAAU,iBAAiBvB,EAAMoK,SCY3BC,MAjCf,WAAwB,IACdhK,EAAUiB,qBAAWzB,GAArBQ,MAQR,OACE,yBAAKuE,GAAG,cAAcrD,UAAU,UAC7BlB,EAAM,GACL,4BACGA,EAAM0E,KAAI,SAACzH,GACV,OACE,kBAAC,EAAD,CACEA,KAAMA,EACN8M,MAAO9M,EAAKD,SACZ2H,IAAK1H,EAAKC,IACVoM,KAAMrM,EAAKC,UAKjB,KACJ,kBAAC,EAAD,CACEoH,SAAU,qBACVnD,QAAS,kBAzBM,WACR4D,SAASC,eAAe,eAC9BC,UAAUG,IAAI,QACnB,IAAI6E,EAAQlF,SAASwC,uBAAuB,MAC5C0C,EAAM,GAAGhF,UAAUC,OAAO,QAC1B+E,EAAM,GAAGhF,UAAUC,OAAO,QAoBPgF,QCCRC,MA3Bf,SAAsBxK,GAAQ,IACpBuD,EAAUjC,qBAAW0C,GAArBT,MAOR,OACE,yBAAKqB,GAAG,eAAerD,UAAU,UAC/B,wBAAIA,UAAU,cAAd,cACCgC,EAAM,GACL,wBAAIhC,UAAU,UACXgC,EAAMwB,KAAI,SAACxC,GACV,OAAOtE,EAASsE,EAAKG,WAAWlE,WAC9BP,EAASsE,EAAKG,WAAW0G,aAAe,GACtCpJ,EAAM9B,KACR,kBAAC,EAAD,CAAWqE,KAAMA,EAAMyC,IAAKzC,EAAKC,MAC/B,SAGN,KACJ,kBAAC,EAAD,CAAamC,SAAS,mBAAmBnD,QAAS,kBAnBzC4D,SAASC,eAAe,gBAC9BC,UAAUG,IAAI,aACRL,SAASC,eAAe,kBAC9BC,UAAUC,OAAO,aCgBXkF,MAxBf,SAAkBzK,GAAQ,IAAD,EACIsB,qBAAW6C,GAA9BV,EADe,EACfA,KAAMe,EADS,EACTA,SAUd,OACE,kBAAC,IAAMM,SAAP,KACE,8BACEF,GAAG,WACHrD,UAAU,KACVY,SAAU,SAACV,GAAD,OAAO+C,EAAS/C,EAAEW,OAAOrE,QACnC8H,aAAcpC,EAAK,GAAKA,EAAK,GAAGA,KAAO,OAEzC,kBAAC,EAAD,CAAajC,QAAS,kBAhBP,WACN4D,SAASC,eAAe,eAC9BC,UAAUC,OAAO,QACtB,IAAI+E,EAAQlF,SAASwC,uBAAuB,MAC5C0C,EAAM,GAAGhF,UAAUG,IAAI,QACvB6E,EAAM,GAAGhF,UAAUG,IAAI,QAWOiF,IAAc/F,SAAS,eC2D1CgG,MAxEf,WAAwB,MAIE7I,mBAAS,IAAI1D,MAJf,mBAIfc,EAJe,KAIT0L,EAJS,KAetB,SAASnD,EAAMC,GACb,IAAImD,EAAUzF,SAASC,eAAe,eAClCyF,EAAS1F,SAASC,eAAe,gBACjC0F,EAAU3F,SAASC,eAAe,kBAClC2F,EAAQ5F,SAASC,eAAe,YAIhCqC,EAAEO,SAAW6C,GAAUC,IAEtBD,EAAOxF,UAAU8C,SAAS,SAC1B2C,EAAQzF,UAAU8C,SAAS,SAE5B0C,EAAOxF,UAAUG,IAAI,SAGrBiC,EAAEO,SAAW+C,GAASH,IAErBA,EAAQvF,UAAU8C,SAAS,SAC3B4C,EAAM1F,UAAU8C,SAAS,QAIjB4C,EAAM1F,UAAU8C,SAAS,UAClCyC,EAAQvF,UAAUC,OAAO,QACzB5F,QAAQC,IAAI,kBAJZD,QAAQC,IAAI,cACZiL,EAAQvF,UAAUG,IAAI,UAhC5BlF,qBAAU,WACR,IAAI0K,EAAUC,aAAY,WAO1BN,EAAQ,IAAIxM,QAP4B,KACxC,OAAO,WACL+M,cAAcF,OAsClB,IAAIvD,EAAIY,OAAOC,WAAW,sBAO1B,OALAD,OAAO8C,iBAAiB,SAAU3D,EAAMC,IACxCnH,qBAAU,WACRkH,EAAMC,MAIN,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAgBxJ,KAAMgB,IACtB,yBAAK0F,GAAG,gBACN,kBAAC,EAAD,CAAgB1G,KAAMgB,IACtB,kBAAC,EAAD,CAAchB,KAAMgB,IACpB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUhB,KAAMgB,KAElB,kBAAC,EAAD,KACE,kBAAC,EAAD,W,OChDGmM,MAnBf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,kCACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,gBACV,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,KACE,kBAAC,EAAD,WCNQC,QACW,cAA7BlD,OAAOmD,SAASC,UAEe,UAA7BpD,OAAOmD,SAASC,UAEhBpD,OAAOmD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1G,SAASC,eAAe,SDyHpB,kBAAmB0G,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3M,QAAQ2M,MAAMA,EAAMC,c","file":"static/js/main.47c121db.chunk.js","sourcesContent":["export const booleanReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_BOOL\":\n      return [\n        ...state,\n        {\n          boolName: action.bool.boolName,\n          bID: Math.floor(Math.random() * 900000),\n          pID: 1,\n          isComplete: false,\n        },\n      ];\n    case \"TOGGLE_BOOL\":\n      let index = state.findIndex((bool) => bool.bID === action.bool.bool.bID);\n\n      state[index].isComplete = !action.bool.value;\n      return [...state];\n    case \"REMOVE_BOOL\":\n      return state.filter((bool) => bool.bID !== action.bID);\n    default:\n      return state;\n  }\n};\n// Add Complete_bool\n","export const dateConv = (time) => {\n  let today = new Date();\n  today.setHours(Number(time.substring(0, 2)));\n  today.setMinutes(Number(time.substring(3, 5)));\n  return today;\n};\nexport const disp12Time = (timeString) => {\n  let hours = Number(timeString.substring(0, 2));\n  let minutes = Number(timeString.substring(3, 5));\n  if (minutes > 59) {\n    minutes %= 60;\n  }\n  minutes = minutes.toString().padStart(2, \"0\");\n  if (hours > 12 && hours <= 23) {\n    hours -= 12;\n    let newtime = hours + \":\" + minutes + \"pm\";\n    return newtime;\n  }\n  if (hours > 12) {\n    hours %= 12;\n  }\n\n  if (hours === 12) {\n    let newtime = hours + \":\" + minutes + \"pm\";\n    return newtime;\n  }\n  if (hours === 0) {\n    hours = 12;\n  }\n  let newtime = hours + \":\" + minutes + \"am\";\n\n  return newtime;\n};\n\nexport let now = new Date();\n\nexport let checker = false;\n\nexport const isToday = () => {\n  if (!checker) {\n    checker = true;\n    return isToday2();\n  } else {\n    return true;\n  }\n};\n\nconst isToday2 = () => {\n  const date = localStorage.getItem(\"date\");\n  let today = new Date();\n  let oldDate = date ? new Date(date) : new Date();\n  if (\n    oldDate.getMonth() < today.getMonth() ||\n    oldDate.getDay() < today.getDay() ||\n    oldDate.getFullYear() < today.getFullYear()\n  ) {\n    localStorage.setItem(\"date\", today.toDateString());\n    localStorage.setItem(\"tasks\", []);\n    localStorage.setItem(\"bools\", []);\n    localStorage.setItem(\"note\", \"\");\n    console.log(\"Is today false\");\n    console.log(`oldDate is  ${oldDate}`);\n    return false;\n  } else {\n    console.log(\"Is today true\");\n    localStorage.setItem(\"date\", today.toDateString());\n    return true;\n  }\n};\n","import React, { createContext, useReducer, useEffect } from \"react\";\nimport { booleanReducer } from \"../reducers/booleanreducer\";\nimport { isToday } from \"../components/scripts/shared\";\nexport const BooleanContext = createContext();\n\nconst BooleanContextProvider = (props) => {\n  const [bools, boolsDispatch] = useReducer(booleanReducer, [], () => {\n    const localData = localStorage.getItem(\"bools\");\n    return localData && isToday() ? JSON.parse(localData) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem(\"bools\", JSON.stringify(bools));\n    console.log(`Bools was just set to ${JSON.stringify(bools)}`);\n  }, [bools]);\n  return (\n    <BooleanContext.Provider value={{ bools, boolsDispatch }}>\n      {props.children}\n    </BooleanContext.Provider>\n  );\n};\n\nexport default BooleanContextProvider;\n","export const DayPresetReducer = (state, action) => {\n  //let index = state.findIndex((task) => task.tID == action.task.tID);\n  switch (action.type) {\n    case \"ADD_PRESET\":\n      return (state = [\n        ...state,\n        {\n          presetName: action.preset.presetName,\n          taskList: action.preset.presetTasks,\n          dpID: Math.floor(Math.random() * 900000),\n        },\n      ]);\n\n    case \"REMOVE_PRESET\":\n      return state.filter((preset) => preset.dpID !== action.dpID);\n    case \"RENAME_PRESET\":\n      return [...state];\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useEffect, useReducer } from \"react\";\nimport { DayPresetReducer } from \"../reducers/daypresetreducer\";\nexport const DayPresetContext = createContext();\n\nconst DayPresetContextProvider = (props) => {\n  const [dayPresets, dayDispatch] = useReducer(DayPresetReducer, [], () => {\n    const localData = localStorage.getItem(\"dayPresets\");\n    return localData ? JSON.parse(localData) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem(\"dayPresets\", JSON.stringify(dayPresets));\n    console.log(`dayPresets was just set to ${JSON.stringify(dayPresets)}`);\n  }, [dayPresets]);\n  return (\n    <DayPresetContext.Provider value={{ dayPresets, dayDispatch }}>\n      {props.children}\n    </DayPresetContext.Provider>\n  );\n};\n\nexport default DayPresetContextProvider;\n","import React, { useContext } from \"react\";\nimport { BooleanContext } from \"../../contexts/booleancontext\";\nimport { DayPresetContext } from \"../../contexts/daypresetcontext\";\n\nfunction CreationSelection(props) {\n  //Possibly also do one that renames the thing\n  const { boolsDispatch } = useContext(BooleanContext);\n  const { dayDispatch } = useContext(DayPresetContext);\n  function deleteSelection(e) {\n    e.preventDefault();\n    if (props.bool) {\n      boolsDispatch({ type: \"REMOVE_BOOL\", bID: props.bool.bID });\n    } else if (props.preset) {\n      dayDispatch({ type: \"REMOVE_PRESET\", dpID: props.preset.dpID });\n    }\n  }\n  return (\n    <div className=\"creationselection\">\n      <button className=\"deletebutton\" onClick={(e) => deleteSelection(e)}>\n        x\n      </button>\n      <p className=\"selectionname\" onClick={props.onClick}>\n        {props.selectionname}\n      </p>\n    </div>\n  );\n}\n\nexport default CreationSelection;\n","import React, { useState, useContext } from \"react\";\nimport { BooleanContext } from \"../../contexts/booleancontext\";\n\nfunction CreationSelectionInput(props) {\n  const { boolsDispatch } = useContext(BooleanContext);\n  const [boolName, setName] = useState(\"\");\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    boolsDispatch({\n      type: \"ADD_BOOL\",\n      bool: {\n        boolName,\n      },\n    });\n    setName(\"\");\n  };\n  return (\n    <div className=\"creationselection\">\n      <form onSubmit={handleSubmit}>\n        <input\n          className=\"selectioninput\"\n          placeholder=\"New\"\n          type=\"text\"\n          name=\"AltAdder\"\n          value={boolName}\n          onChange={(e) => setName(e.target.value)}\n          required\n        />\n        <input type=\"submit\" value=\"+\" className=\"deletebutton\" />\n      </form>\n    </div>\n  );\n}\n\nexport default CreationSelectionInput;\n","export const scheduleReducer = (state, action) => {\n  let index = state.findIndex((task) => task.tID === action.task.tID);\n  switch (action.type) {\n    case \"ADD_TASK\":\n      return insertByTime(state, action.task);\n    case \"REPLACE_TASKS\":\n      return [...action.tasks];\n    case \"REMOVE_TASK\":\n      return state.filter((task) => task.tID !== action.task.tID);\n    case \"TOGGLE_TASK\":\n      state[index].isComplete = !state[index].isComplete;\n      return [...state];\n    case \"EDIT_TASK_NOTE\":\n      state[action.task.ind].taskNotes = action.task.note;\n      return [...state];\n    case \"MARK_CURRENT\":\n      for (let i = 0; i < state.length; i++) {\n        if (i === index) {\n          state[index].isCurrent = true;\n        } else {\n          state[i].isCurrent = false;\n        }\n      }\n      console.log(\"currentmarked\");\n      return [...state];\n    case \"TOGGLE_SUB\":\n      let stIDcheck = action.task.sub.stID;\n      let stIndex = state[index].subtasks.findIndex(\n        (sub) => sub.stID === stIDcheck\n      );\n      state[index].subtasks[stIndex].isComplete = !action.task.value;\n      return [...state];\n    default:\n      return state;\n  }\n};\n//add and remove SubTasks\n//edit subtasks\nfunction insertByTime(state, task) {\n  state = [\n    ...state,\n    {\n      taskName: task.taskName,\n      tID: Math.floor(Math.random() * 900000),\n      pID: 1,\n      startTime: task.startTime,\n      endTime: task.endTime,\n      isComplete: false,\n      taskNotes: task.taskNotes,\n      isCurrent: false,\n      subtasks: task.subtasks,\n    },\n  ];\n  state.sort(function (a, b) {\n    let hoursA = Number(a.startTime.substring(0, 2));\n    let hoursB = Number(b.startTime.substring(0, 2));\n    let minutesA = Number(a.startTime.substring(3, 5));\n    let minutesB = Number(b.startTime.substring(3, 5));\n\n    if (hoursA < hoursB || (hoursA === hoursB && minutesA < minutesB)) {\n      return -1;\n    }\n    if (hoursB < hoursA) {\n      return 1;\n    }\n\n    return 0;\n  });\n  return [...state];\n}\n","import React, { createContext, useReducer, useEffect } from \"react\";\nimport { scheduleReducer } from \"../reducers/schedulereducer\";\nimport { isToday } from \"../components/scripts/shared\";\n\nexport const ScheduleContext = createContext();\n\nconst ScheduleContextProvider = (props) => {\n  const [tasks, dispatch] = useReducer(scheduleReducer, [], () => {\n    const localData = localStorage.getItem(\"tasks\");\n    //check with an if in here to see if we are on the current day or not\n    //Actually use the function I will make in shared\n\n    return localData && isToday() ? JSON.parse(localData) : [];\n  });\n  useEffect(() => {\n    if (isToday()) {\n      localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    } else {\n      localStorage.setItem(\"tasks\", []);\n    } //  console.log(`Tasks was just set to ${JSON.stringify(tasks)}`);\n  }, [tasks]);\n  return (\n    <ScheduleContext.Provider value={{ tasks, dispatch }}>\n      {props.children}\n    </ScheduleContext.Provider>\n  );\n};\n\nexport default ScheduleContextProvider;\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { isToday } from \"../components/scripts/shared\";\n\nexport const DayNotesContext = createContext();\n\nconst DayNotesContextProvider = (props) => {\n  let initNote = localStorage.getItem(\"note\");\n  let jsonNote =\n    initNote && isToday()\n      ? JSON.parse(initNote)\n      : [{ note: \"Today's Notes: \" }];\n  const [note, setNote] = useState(jsonNote);\n  const editNote = (newNote) => {\n    setNote([{ note: newNote }]);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"note\", JSON.stringify(note));\n  }, [note]);\n  return (\n    <DayNotesContext.Provider value={{ note, editNote }}>\n      {props.children}\n    </DayNotesContext.Provider>\n  );\n};\n\nexport default DayNotesContextProvider;\n","import React from \"react\";\n\nfunction SwipeButton(props) {\n  return (\n    <div\n      className={`swipeButton ${props.addClass}`}\n      onClick={props.onClick}\n      id={props.id}\n    >\n      <span className=\"swbt\">»</span>\n    </div>\n  );\n}\n\nexport default SwipeButton;\n","import React, { useContext } from \"react\";\nimport CreationSelection from \"./creationselection\";\nimport CreationSelectionInput from \"./creationselectioninput\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport { BooleanContext } from \"../../contexts/booleancontext\";\nimport { DayNotesContext } from \"../../contexts/daynotescontext\";\nimport { DayPresetContext } from \"../../contexts/daypresetcontext\";\nimport SwipeButton from \"../swipebutton\";\n\nfunction CreationSidebar() {\n  const { tasks, dispatch } = useContext(ScheduleContext);\n  const { bools } = useContext(BooleanContext);\n  const { dayPresets, dayDispatch } = useContext(DayPresetContext);\n  const { note, editNote } = useContext(DayNotesContext);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dayDispatch({\n      type: \"ADD_PRESET\",\n      preset: {\n        presetName: new Date().toDateString(),\n        presetTasks: tasks,\n      },\n    });\n  };\n  const swapTasks = (e, list) => {\n    e.preventDefault();\n    dispatch({\n      type: \"REPLACE_TASKS\",\n      tasks: list,\n      task: 0,\n    });\n  };\n  const hideSidebar = (a) => {\n    let sb = document.getElementById(\"schedPreSB\");\n    let upbutt = document.getElementById(\"createrReveal\");\n    upbutt.classList.remove(\"hide\");\n    a.target.parentNode.parentNode.parentNode.classList.add(\"hide\");\n    sb.classList.remove(\"hide\");\n  };\n  return (\n    <React.Fragment>\n      <div className=\"sidebar\" id=\"creationsidebar\">\n        <div id=\"sideScroller\">\n          <div className=\"sidebarlabel\">\n            <p className=\"lighttext\">Preset Schedules:</p>\n            <div className=\"sidebarlist\">\n              {dayPresets.map((preset) => {\n                return (\n                  <CreationSelection\n                    selectionname={preset.presetName}\n                    preset={preset}\n                    key={preset.dpID}\n                    onClick={(e) => {\n                      swapTasks(e, preset.taskList);\n                    }}\n                  />\n                );\n              })}\n            </div>\n            <button id=\"createpresetbutton\" onClick={handleSubmit}>\n              Create Preset From Current\n            </button>\n          </div>\n          {/*\n     <div className=\"sidebarlabel\">\n            <p className=\"lighttext\">Preset Tasks:</p>\n            <div className=\"sidebarlist\">\n              <ul>\n                {tasks.map((task) => {\n                  return (\n                    <CreationSelection\n                      selectionname={task.taskName}\n                      key={task.tID}\n                    />\n                  );\n                })}\n              </ul>\n\n              <CreationSelectionInput action=\"ADD_PRESET\" />\n            </div>\n          </div>\n    */}\n          <SwipeButton id=\"cSideHide\" onClick={(a) => hideSidebar(a)} />\n          <div className=\"sidebarlabel\">\n            <p className=\"lighttext\">Un-Timed Tasks:</p>\n            <div className=\"sidebarlist\">\n              {bools[0] ? (\n                <ul>\n                  {bools.map((bool) => {\n                    return (\n                      <CreationSelection\n                        selectionname={bool.boolName}\n                        key={bool.bID}\n                        bool={bool}\n                      />\n                    );\n                  })}\n                </ul>\n              ) : null}\n              <CreationSelectionInput action=\"ADD_BOOl\" />\n            </div>\n          </div>\n          <textarea\n            cols=\"28\"\n            rows=\"6\"\n            className=\"dayNotes\"\n            onChange={(e) => editNote(e.target.value)}\n            defaultValue={note[0] ? note[0].note : null}\n          ></textarea>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default CreationSidebar;\n","import React, { useContext } from \"react\";\nimport { ScheduleContext } from \"../contexts/schedulecontext\";\nimport { disp12Time } from \"./scripts/shared\";\n\nfunction TaskBlock({ task }) {\n  const { dispatch } = useContext(ScheduleContext);\n  return task ? (\n    <div className=\"taskblock\">\n      <button\n        className=\"deletebutton\"\n        onClick={() =>\n          dispatch({ type: \"REMOVE_TASK\", task: { tID: task.tID } })\n        }\n      >\n        x\n      </button>\n      <p className=\"taskname\">{task.taskName}</p>\n      <div className=\"time\">\n        <p className=\"stime\">{disp12Time(task.startTime)}</p>\n        <p>{disp12Time(task.endTime)}</p>\n      </div>\n      {task.subtasks[0] ? (\n        <div className=\"subtask\">\n          <ul className=\"subBarList\">\n            <span className=\"subBar\" key={Math.floor(Math.random() * 900000)}>\n              {task.subtasks.map((st) => {\n                return (\n                  <span\n                    className=\"subBarName\"\n                    key={Math.floor(Math.random() * 900000)}\n                  >\n                    {st.stName}\n                    {\"\\t\"}\n                  </span>\n                );\n              })}\n            </span>\n          </ul>\n        </div>\n      ) : null}\n    </div>\n  ) : null;\n}\n\nexport default TaskBlock;\n","import React, { useContext } from \"react\";\nimport TaskBlock from \"../taskblock\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport SwipeButton from \"../swipebutton\";\n\nconst SchedulePreview = (e) => {\n  const { tasks } = useContext(ScheduleContext);\n  const revealSidebar = (a) => {\n    let bar = document.getElementById(\"creationsidebar\");\n    let upbutt = document.getElementById(\"createrReveal\");\n    bar.classList.remove(\"hide\");\n    bar.style.display = \"block\";\n    a.target.parentNode.classList.add(\"hide\");\n    upbutt.classList.add(\"hide\");\n  };\n  return (\n    <div className=\"schedulepreviewcontainer\">\n      <div className=\"schedulepreview\">\n        <ul id=\"previewlist\">\n          {tasks.map((task) => {\n            return <TaskBlock task={task} key={task.tID} />;\n          })}\n        </ul>\n      </div>\n      <SwipeButton\n        id=\"schedPreSB\"\n        addClass=\"left sp\"\n        onClick={(a) => revealSidebar(a)}\n      />\n    </div>\n  );\n};\n\nexport default SchedulePreview;\n","import React from \"react\";\n\nfunction CheckBox(props) {\n  const swap = () => {\n    props.onClick();\n  };\n  return (\n    <div\n      className={`checkBox ${props.value ? \"checked\" : \"unchecked\"}`}\n      onClick={swap}\n      id={props.id}\n    >\n      <span className=\"check\">{props.value ? \"✓\" : \"✗\"}</span>\n    </div>\n  );\n}\n\nexport default CheckBox;\n//props\n//on clicked\n//value\n//two colors and switch text\n//Do I even need add class\n","import React, { useContext, useState } from \"react\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport CheckBox from \"../checkbox\";\n\nfunction SubtaskPreview(props) {\n  const { dispatch } = useContext(ScheduleContext);\n  const [name, setName] = useState(props.subtask.stName);\n  const [indic, setIndic] = useState(props.subtask.stType);\n  const [indicVal, setIndicVal] = useState(props.subtask.goal);\n  return (\n    <div className=\"subtaskpreview\">\n      <div className=\"creater of subtasks\">\n        <input\n          className=\"subtasknameinput taskcreationinput\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          type=\"text\"\n        />\n        <label className=\"switch\" id=\"typeselector\">\n          <input\n            type=\"checkbox\"\n            name=\"indication\"\n            onChange={(e) => setIndic(!indic)}\n            className=\"check\"\n            checked={indic}\n          />\n          <span className=\"slider\"></span>\n        </label>\n        {indic ? (\n          <input\n            type=\"number\"\n            name=\"indicval\"\n            onChange={(e) => setIndicVal(e.target.value)}\n            value={indicVal}\n            min={1}\n            max={999}\n          />\n        ) : (\n          <CheckBox\n            type=\"checkbox\"\n            className=\"check\"\n            onClick={() => true}\n            value={false}\n          ></CheckBox>\n        )}\n        <span\n          className=\"stSub\"\n          onClick={() =>\n            dispatch({ type: \"REMOVE_SUB\", stID: props.subtask.stID })\n          }\n        >\n          -\n        </span>\n      </div>\n    </div>\n  );\n}\n//on change edit subtask in scheduleReducer\nexport default SubtaskPreview;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport SubtaskPreview from \"./subtaskcreator\";\nimport SwipeButton from \"../swipebutton\";\nimport CheckBox from \"../checkbox\";\n\nfunction TaskCreator() {\n  const { dispatch } = useContext(ScheduleContext);\n  const [taskName, setName] = useState(\"\");\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [taskNotes, setNotes] = useState(\"\");\n  const [subtasks, setSubtasks] = useState(\"\");\n  const [stName, setstName] = useState(\"\");\n  const [indic, setIndic] = useState(false);\n  const [indicVal, setIndicVal] = useState(2);\n  //Change Safari time in here too\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch({\n      type: \"ADD_TASK\",\n      task: {\n        taskName,\n        startTime,\n        endTime,\n        taskNotes,\n        subtasks,\n      },\n    });\n    setName(\"\");\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setNotes(\"Notes: \");\n    setSubtasks(\"\");\n    setIndic(false);\n    setIndicVal(2);\n    setstName(\"\");\n  };\n  function hider(x) {\n    let thisOne = document.getElementsByClassName(\n      \"tasknotesinput taskcreationinput\"\n    );\n    //let taskcreator = document.getElementById(\"taskcreator\");\n    let thistwo = document.getElementsByClassName(\"creater\");\n    let createrreveal = document.getElementById(\"createrReveal\");\n    let thisthree = document.getElementsByClassName(\"secondpart\");\n    let thisone = [...thisOne, ...thistwo, ...thisthree];\n    if (\n      x.matches &&\n      (createrreveal.getAttribute(\"opened\") === \"false\" ||\n        !createrreveal.hasAttribute(\"opened\"))\n    ) {\n      for (let i = 0; i < thisone.length; i++) {\n        //console.log(thisone[i]);\n        //if taht down there and creater is not in focus\n        if (!thisone[i].classList.contains(\"hide\")) {\n          thisone[i].classList.add(\"hide\");\n          //Finish subtask in reducer\n        } else {\n          //thisone[i].classList.remove(\"hide\");\n          //unfinish subtask in reducer\n        }\n      }\n      createrreveal.setAttribute(\"opened\", \"false\");\n    } else {\n      for (let i = 0; i < thisone.length; i++) {\n        //console.log(thisone[i]);\n        if (thisone[i].classList.contains(\"hide\")) {\n          thisone[i].classList.remove(\"hide\");\n          //Finish subtask in reducer\n        }\n      }\n    }\n  }\n  const revealCreator = (a) => {\n    let thisOne = document.getElementsByClassName(\n      \"tasknotesinput taskcreationinput\"\n    );\n    let thistwo = document.getElementsByClassName(\"creater\");\n    let createrreveal = document.getElementById(\"createrReveal\");\n    let thisthree = document.getElementsByClassName(\"secondpart\");\n    let thisone = [...thisOne, ...thistwo, ...thisthree];\n    if (\n      x.matches &&\n      (createrreveal.getAttribute(\"opened\") === \"false\" ||\n        !createrreveal.hasAttribute(\"opened\"))\n    ) {\n      for (let i = 0; i < thisone.length; i++) {\n        //  console.log(thisone[i]);\n        if (thisone[i].classList.contains(\"hide\")) {\n          thisone[i].classList.remove(\"hide\");\n          //Finish subtask in reducer\n        } else {\n          //thisone[i].classList.remove(\"hide\");\n          //unfinish subtask in reducer\n        }\n      }\n      createrreveal.setAttribute(\"opened\", \"true\");\n    } else {\n      for (let i = 0; i < thisone.length; i++) {\n        //console.log(thisone[i]);\n        if (!thisone[i].classList.contains(\"hide\")) {\n          thisone[i].classList.add(\"hide\");\n          //Finish subtask in reducer\n        }\n      }\n      createrreveal.setAttribute(\"opened\", \"false\");\n    }\n  };\n  let x = window.matchMedia(\"(max-width: 720px)\");\n  // Call listener function at run time\n  x.addListener(hider);\n  useEffect(() => {\n    hider(x);\n  });\n  const addST = (e) => {\n    setSubtasks([\n      ...subtasks,\n      {\n        stName,\n        stType: indic,\n        goal: indicVal,\n        stID: Math.floor(Math.random() * 900000),\n        value: 0,\n        isComplete: false,\n      },\n    ]);\n    setIndic(false);\n    setIndicVal(2);\n    setstName(\"\");\n  };\n  //hh%3Amm <- time format\n  return (\n    <React.Fragment>\n      <form onSubmit={handleSubmit}>\n        <div id=\"taskcreator\">\n          <div className=\"lineup\">\n            <div>\n              <input\n                className=\"tasknameinput taskcreationinput\"\n                placeholder=\"Task Name\"\n                type=\"text\"\n                value={taskName}\n                onChange={(e) => setName(e.target.value)}\n                name=\"taskName\"\n                required\n              />\n              <label id=\"tasknamelabel\" htmlFor=\"taskName\">\n                Task Name\n              </label>\n            </div>\n            <div id=\"timeinput\" className=\"double\">\n              <div>\n                <label htmlFor=\"starttime\" className=\"timeLabel\">\n                  Start Time\n                </label>\n                <input\n                  className=\"taskcreationinput timeinput\"\n                  type=\"time\"\n                  placeholder=\"00:00\"\n                  name=\"starttime\"\n                  onChange={(e) => setStartTime(e.target.value)}\n                  value={startTime}\n                  title=\"24hr time - 00:01-23:59\"\n                  pattern=\"[0-9]{2}:[0-9]{2}\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"endtime\" className=\"timeLabel\">\n                  End Time\n                </label>\n                <input\n                  className=\"taskcreationinput timeinput\"\n                  type=\"time\"\n                  name=\"endtime\"\n                  onChange={(e) => setEndTime(e.target.value)}\n                  value={endTime}\n                  placeholder=\"00:00\"\n                  pattern=\"[0-9]{2}:[0-9]{2}\"\n                  title=\"24hr time - 00:01-23:59\"\n                  min={startTime}\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"stlist\">\n              {subtasks[0] ? (\n                <ul>\n                  {subtasks.map((sub) => {\n                    return (\n                      <SubtaskPreview\n                        stName={sub.stName}\n                        key={sub.stID}\n                        subtask={sub}\n                      />\n                    );\n                  })}\n                </ul>\n              ) : null}\n            </div>\n            <div>\n              <input\n                className=\"subtasknameinput taskcreationinput creater\"\n                placeholder=\"Subtask Name\"\n                type=\"text\"\n                onChange={(e) => setstName(e.target.value)}\n                value={stName}\n                name=\"subTaskName\"\n              />\n              <label className=\"subtasknamelabel\" htmlFor=\"subTaskName\">\n                Subtask Name\n              </label>\n            </div>\n            <div className=\"secondpart\">\n              <label className=\"switch\" id=\"typeselector\">\n                <input\n                  type=\"checkbox\"\n                  name=\"indication\"\n                  onChange={(e) => setIndic(!indic)}\n                  className=\"check\"\n                  checked={indic}\n                />\n                <span className=\"slider\"></span>\n              </label>\n              {indic ? (\n                <input\n                  type=\"number\"\n                  name=\"indicval\"\n                  onChange={(e) => setIndicVal(e.target.value)}\n                  value={indicVal}\n                  min={1}\n                  max={999}\n                />\n              ) : (\n                <CheckBox\n                  type=\"checkbox\"\n                  className=\"check\"\n                  onClick={() => true}\n                  value={false}\n                ></CheckBox>\n              )}\n              <span onClick={addST} className=\"stSub\">\n                +\n              </span>\n            </div>\n          </div>\n          <textarea\n            onLoad={() => hider(window.matchMedia(\"(max-width: 860px)\"))}\n            cols=\"28\"\n            rows=\"5\"\n            className=\"tasknotesinput taskcreationinput\"\n            onChange={(e) => setNotes(e.target.value)}\n            value={taskNotes}\n          ></textarea>\n\n          <input type=\"submit\" value=\"+\" id=\"creatoradd\" />\n        </div>\n      </form>\n      <SwipeButton\n        id=\"createrReveal\"\n        addClass=\"mid\"\n        onClick={(a) => revealCreator(a)}\n      ></SwipeButton>\n    </React.Fragment>\n  );\n}\n\nexport default TaskCreator;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction BackHeader() {\n  let today = new Date();\n  today = today.toDateString();\n  return (\n    <div className=\"backheader\">\n      <span id=\"topDate\">{today}</span>\n      <Link className=\"right topLink\" to=\"/dayschedule\">\n        Schedule\n      </Link>\n    </div>\n  );\n}\n\nexport default BackHeader;\n","import React from \"react\";\nimport CreationSidebar from \"./creationsidebar\";\nimport SchedulePreview from \"./schedulepreview\";\nimport TaskCreator from \"./taskcreator\";\nimport BackHeader from \"../backheader\";\nimport ScheduleContextProvider from \"../../contexts/schedulecontext\";\nimport DayNotesContextProvider from \"../../contexts/daynotescontext\";\nimport BooleanContextProvider from \"../../contexts/booleancontext\";\nimport DayPresetContextProvider from \"../../contexts/daypresetcontext\";\nfunction Main() {\n  return (\n    <ScheduleContextProvider>\n      <React.Fragment>\n        <div className=\"doubler\">\n          <div>\n            <BooleanContextProvider>\n              <DayNotesContextProvider>\n                <DayPresetContextProvider>\n                  <CreationSidebar />\n                </DayPresetContextProvider>\n              </DayNotesContextProvider>\n            </BooleanContextProvider>\n          </div>\n\n          <div className=\"content\">\n            <BackHeader />\n            <SchedulePreview />\n            <TaskCreator />\n          </div>\n        </div>\n      </React.Fragment>\n    </ScheduleContextProvider>\n  );\n}\n\nexport default Main;\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport { dateConv, disp12Time } from \"../scripts/shared.js\";\n\nfunction ScheduleHeader(props) {\n  const { tasks } = useContext(ScheduleContext);\n  let todayTime = disp12Time(\n    props.time.getHours().toString().padStart(2, \"0\") +\n      \":\" +\n      props.time.getMinutes().toString().padStart(2, \"0\")\n  );\n  let index = tasks.findIndex(\n    (task) =>\n      dateConv(task.startTime).setMinutes(\n        dateConv(task.startTime).getMinutes() - 1\n      ) <= props.time && dateConv(task.endTime) >= props.time\n  );\n  let percent = 0;\n  if (tasks[index]) {\n    let total =\n      dateConv(tasks[index].endTime) -\n      dateConv(tasks[index].startTime).setMinutes(\n        dateConv(tasks[index].startTime).getMinutes() - 1\n      );\n    let part =\n      props.time -\n      dateConv(tasks[index].startTime).setMinutes(\n        dateConv(tasks[index].startTime).getMinutes() - 1\n      );\n    percent = (part / total) * 100;\n  }\n  return (\n    <React.Fragment>\n      <div className=\"scheduleheader\">\n        <div className=\"timegroup\">\n          <span id=\"stime\">\n            {tasks[index] ? disp12Time(tasks[index].startTime) : \"\"}\n          </span>\n          <span id=\"currenttimedisplay\">{todayTime}</span>\n          <span id=\"etime\">\n            {tasks[index] ? disp12Time(tasks[index].endTime) : \"\"}\n          </span>\n        </div>\n        <div className=\"baseline\">\n          <span>{props.time.toDateString()}</span>\n          <Link className=\"right\" to=\"/\">\n            Schedule Creator\n          </Link>\n        </div>\n        <div id=\"progressbar\">\n          <div id=\"progress\" style={{ width: `${percent}%` }}></div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n//\nexport default ScheduleHeader;\n","import React, { useContext, useState } from \"react\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport CheckBox from \"../checkbox\";\n\nfunction SubtaskDisplay(props) {\n  const { dispatch } = useContext(ScheduleContext);\n  const [value, setValue] = useState(props.sub.value);\n  let classes = \"subtaskdisplay\" + (props.sub.isComplete ? \" finished\" : \"\");\n  //Actually Change in Reducer with an edit subtask action\n  function flipCheck() {\n    dispatch({\n      type: \"TOGGLE_SUB\",\n      task: {\n        sub: props.sub,\n        tID: props.task.tID,\n        value: props.sub.isComplete,\n      },\n    });\n    classes = \"subtaskdisplay\" + (props.sub.isComplete ? \" finished\" : \"\");\n  }\n  return (\n    <div className={classes} key={props.sub.stID} key2={props.sub.stID}>\n      <CheckBox\n        type=\"checkbox\"\n        className=\"check\"\n        onClick={flipCheck}\n        value={props.sub.isComplete}\n      ></CheckBox>\n      <p className=\"stdName\">{props.stName}</p>\n\n      {props.sub.stType ? (\n        <div>\n          <input\n            className=\"stCountIn\"\n            type=\"number\"\n            name=\"indicval\"\n            onChange={(e) => setValue(e.target.value)}\n            value={value ? value : 0}\n            min={0}\n            max={props.sub.goal}\n          />\n\n          <span>/{props.sub.goal}</span>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default SubtaskDisplay;\n","import React, { useContext, useState } from \"react\";\nimport SubtaskDisplay from \"./subtaskdisplay\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport SwipeButton from \"../swipebutton\";\nimport { dateConv } from \"../scripts/shared\";\n\n//probably gotta fix the swap top to get it working\nconst swapTop = () => {\n  let list = document.getElementById(\"upcominglist\");\n  list.classList.remove(\"hide\");\n  let curr = document.getElementById(\"currentdisplay\");\n  curr.classList.add(\"hide\");\n};\n\nfunction CurrentDisplay(props) {\n  const { tasks, dispatch } = useContext(ScheduleContext);\n  let currentIndex = tasks.findIndex(\n    (task) =>\n      dateConv(task.startTime).setMinutes(\n        dateConv(task.startTime).getMinutes() - 1\n      ) <= props.time && dateConv(task.endTime) >= props.time\n  );\n\n  const [note, setNote] = useState(\n    currentIndex >= 0 ? tasks[currentIndex.taskNotes] : \"\"\n  );\n\n  const updateNote = (change) => {\n    setNote(change);\n    dispatch({\n      type: \"EDIT_TASK_NOTE\",\n      task: {\n        note: note,\n        ind: currentIndex,\n      },\n    });\n  };\n  function markText() {\n    let currentName = document.getElementById(\"currentdisplayname\");\n    if (currentName.className === \"\") {\n      currentName.className = \"finished\";\n    } else {\n      currentName.className = \"\";\n    }\n  }\n  const toggleTask = (tid) => {\n    console.log(tid);\n    dispatch({\n      type: \"TOGGLE_TASK\",\n      task: {\n        tID: tid,\n      },\n    });\n  };\n  if (currentIndex >= 0) {\n    let curr = document.getElementById(\"currentdisplay\");\n    if (!tasks[currentIndex].subtasks && curr) {\n      curr.classList.add(\"noSub\");\n    } else if (curr) {\n      curr.classList.remove(\"noSub\");\n    }\n  }\n  return (\n    <div id=\"currentdisplay\" className=\"noSub\">\n      <div id=\"currenttasktop\">\n        <ul className=\"inline\">\n          <h1\n            id=\"currentdisplayname\"\n            className={\n              tasks[currentIndex]\n                ? tasks[currentIndex].isComplete\n                  ? \"finished\"\n                  : \"\"\n                : \"\"\n            }\n          >\n            {tasks[currentIndex] ? tasks[currentIndex].taskName : \"Break\"}\n          </h1>\n        </ul>\n        {currentIndex >= 0 ? (\n          <button\n            id=\"nexttaskbutt\"\n            onClick={() => {\n              markText();\n              toggleTask(tasks[currentIndex].tID);\n\n              console.log(\"toggle clicked\");\n            }}\n          >\n            Mark Complete\n          </button>\n        ) : null}\n      </div>\n      <div id=\"currentdiplaysub\">\n        {currentIndex >= 0\n          ? tasks[currentIndex].subtasks\n            ? tasks[currentIndex].subtasks.map((subtask) => {\n                return (\n                  <SubtaskDisplay\n                    sub={subtask}\n                    key={subtask.stID}\n                    stName={subtask.stName}\n                    task={tasks[currentIndex]}\n                  />\n                );\n              })\n            : null\n          : null}\n      </div>\n      <div id=\"currentdisplaynotes\">\n        <textarea\n          className=\"dayNotes fillup\"\n          defaultValue={\n            tasks[currentIndex] >= 0\n              ? tasks[currentIndex].taskNotes\n              : \"Task Notes:\"\n          }\n          onChange={\n            currentIndex >= 0 ? (e) => updateNote(e.target.value) : null\n          }\n        ></textarea>\n      </div>\n      <SwipeButton onClick={() => swapTop()} addClass=\"right\" />\n    </div>\n  );\n}\n// setInterval(CurrentDisplay(), 1000);\nexport default CurrentDisplay;\n","import React, { useContext } from \"react\";\nimport { BooleanContext } from \"../../contexts/booleancontext\";\nimport CheckBox from \"../checkbox\";\n\nfunction BooleanDisplay(props) {\n  const { boolsDispatch } = useContext(BooleanContext);\n  let classes = \"subtaskdisplay\" + (props.bool.isComplete ? \" finished\" : \"\");\n\n  function flipCheck() {\n    boolsDispatch({\n      type: \"TOGGLE_BOOL\",\n      bool: {\n        bool: props.bool,\n        value: props.bool.isComplete,\n      },\n    });\n    classes = \"subtaskdisplay\" + (props.bool.isComplete ? \" finished\" : \"\");\n  }\n  return (\n    <div className={classes} key={props.bID} key2={props.bID}>\n      <CheckBox\n        type=\"checkbox\"\n        className=\"check\"\n        onClick={flipCheck}\n        value={props.bool.isComplete}\n      ></CheckBox>\n      <p className=\"selectionname\">{props.bName}</p>\n    </div>\n  );\n}\n\nexport default BooleanDisplay;\n","import React, { useContext } from \"react\";\nimport BooleanDisplay from \"./booleandisplay\";\nimport { BooleanContext } from \"../../contexts/booleancontext\";\nimport SwipeButton from \"../swipebutton\";\n\nfunction BooleanList() {\n  const { bools } = useContext(BooleanContext);\n  const unswapBottom = () => {\n    let list = document.getElementById(\"booleanlist\");\n    list.classList.add(\"hide\");\n    let notes = document.getElementsByClassName(\"dn\");\n    notes[0].classList.remove(\"hide\");\n    notes[1].classList.remove(\"hide\");\n  };\n  return (\n    <div id=\"booleanlist\" className=\"scroll\">\n      {bools[0] ? (\n        <ul>\n          {bools.map((bool) => {\n            return (\n              <BooleanDisplay\n                bool={bool}\n                bName={bool.boolName}\n                key={bool.bID}\n                key2={bool.bID}\n              />\n            );\n          })}\n        </ul>\n      ) : null}\n      <SwipeButton\n        addClass={\"left boolswipebutt\"}\n        onClick={() => unswapBottom()}\n      />\n    </div>\n  );\n}\n\nexport default BooleanList;\n","import React, { useContext } from \"react\";\nimport TaskBlock from \"../taskblock\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport { dateConv } from \"../scripts/shared\";\nimport SwipeButton from \"../swipebutton\";\n\nfunction UpcomingList(props) {\n  const { tasks } = useContext(ScheduleContext);\n  const unswapTop = () => {\n    let list = document.getElementById(\"upcominglist\");\n    list.classList.add(\"hide\");\n    let curr = document.getElementById(\"currentdisplay\");\n    curr.classList.remove(\"hide\");\n  };\n  return (\n    <div id=\"upcominglist\" className=\"scroll\">\n      <h3 className=\"lightlabel\">Coming Up:</h3>\n      {tasks[0] ? (\n        <ul className=\"scroll\">\n          {tasks.map((task) => {\n            return dateConv(task.startTime).setMinutes(\n              dateConv(task.startTime).getMinutes() - 1\n            ) > props.time ? (\n              <TaskBlock task={task} key={task.tID} />\n            ) : null;\n          })}\n        </ul>\n      ) : null}\n      <SwipeButton addClass=\"left upswipebutt\" onClick={() => unswapTop()} />\n    </div>\n  );\n}\n\nexport default UpcomingList;\n","import React, { useContext } from \"react\";\nimport { DayNotesContext } from \"../../contexts/daynotescontext\";\nimport SwipeButton from \"../swipebutton\";\n\nfunction DayNotes(props) {\n  const { note, editNote } = useContext(DayNotesContext);\n\n  const swapBottom = () => {\n    let list = document.getElementById(\"booleanlist\");\n    list.classList.remove(\"hide\");\n    let notes = document.getElementsByClassName(\"dn\");\n    notes[0].classList.add(\"hide\");\n    notes[1].classList.add(\"hide\");\n  };\n\n  return (\n    <React.Fragment>\n      <textarea\n        id=\"daynotes\"\n        className=\"dn\"\n        onChange={(e) => editNote(e.target.value)}\n        defaultValue={note[0] ? note[0].note : null}\n      ></textarea>\n      <SwipeButton onClick={() => swapBottom()} addClass=\"right dn\" />\n    </React.Fragment>\n  );\n}\n\nexport default DayNotes;\n","import React, { useEffect, useState } from \"react\";\nimport ScheduleHeader from \"./scheduleheader\";\nimport CurrentDisplay from \"./currenttaskdisplay\";\nimport BooleanList from \"./booleanlist\";\nimport UpcomingList from \"./upcominglist\";\nimport DayNotes from \"./daynotes\";\nimport ScheduleContextProvider from \"../../contexts/schedulecontext\";\nimport DayNotesContextProvider from \"../../contexts/daynotescontext\";\nimport BooleanContextProvider from \"../../contexts/booleancontext\";\n\nfunction ScheduleMain() {\n  /////////\n  //Do the functional Cock here\n  ////////\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    let timerID = setInterval(() => tick(), 1000);\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  });\n\n  function tick() {\n    setDate(new Date());\n  }\n  function hider(x) {\n    let boolist = document.getElementById(\"booleanlist\");\n    let uplist = document.getElementById(\"upcominglist\");\n    let curtask = document.getElementById(\"currentdisplay\");\n    let dayNo = document.getElementById(\"daynotes\");\n    //need to get the other things and check that instead\n    //let allhidden = document.getElementsByClassName(\"hide\");\n    //console.log(x.matches);\n    if (x.matches && uplist && curtask) {\n      if (\n        !uplist.classList.contains(\"hide\") &&\n        !curtask.classList.contains(\"hide\")\n      ) {\n        uplist.classList.add(\"hide\");\n      }\n    }\n    if (x.matches && dayNo && boolist) {\n      if (\n        !boolist.classList.contains(\"hide\") &&\n        !dayNo.classList.contains(\"hide\")\n      ) {\n        console.log(\"Hide bools\");\n        boolist.classList.add(\"hide\");\n      } else if (dayNo.classList.contains(\"hide\")) {\n        boolist.classList.remove(\"hide\");\n        console.log(\"unhide bools\");\n      } else {\n      }\n    }\n  }\n\n  let x = window.matchMedia(\"(max-width: 720px)\");\n  // Call listener function at run time\n  window.addEventListener(\"resize\", hider(x));\n  useEffect(() => {\n    hider(x);\n  });\n\n  return (\n    <div>\n      <ScheduleContextProvider>\n        <ScheduleHeader time={date} />\n        <div id=\"schedulegrid\">\n          <CurrentDisplay time={date} />\n          <UpcomingList time={date} />\n          <DayNotesContextProvider>\n            <DayNotes time={date} />\n          </DayNotesContextProvider>\n          <BooleanContextProvider>\n            <BooleanList />\n          </BooleanContextProvider>\n        </div>\n      </ScheduleContextProvider>\n    </div>\n  );\n}\n\nexport default ScheduleMain;\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/creation/main.js\";\nimport ScheduleMain from \"./components/schedule/schedulemain.js\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport ScheduleContextProvider from \"./contexts/schedulecontext\";\n\nfunction App() {\n  return (\n    <Router baseline=\"{process.env.PUBLIC_URL + '/'}\">\n      <Switch>\n        <Route path=\"/dayschedule\">\n          <ScheduleContextProvider>\n            <ScheduleMain />\n          </ScheduleContextProvider>\n        </Route>\n        <Route path=\"/\">\n          <ScheduleContextProvider>\n            <Main />\n          </ScheduleContextProvider>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n// <Router>\n//   <Route exact path=\"/\" render={(props) => <Main />} />\n//   <Route exact path=\"/schedule\" render={(props) => <ScheduleMain />} />\n// </Router>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}