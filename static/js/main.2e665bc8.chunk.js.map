{"version":3,"sources":["reducers/booleanreducer.js","components/scripts/shared.js","contexts/booleancontext.js","reducers/daypresetreducer.js","contexts/daypresetcontext.js","reducers/schedulereducer.js","contexts/schedulecontext.js","components/creation/creationselection.js","components/creation/creationselectioninput.js","contexts/daynotescontext.js","components/swipebutton.js","components/creation/creationsidebar.js","components/taskblock.js","components/creation/schedulepreview.js","components/checkbox.js","components/creation/subtaskcreator.js","components/creation/taskcreator.js","components/backheader.js","components/creation/main.js","components/schedule/scheduleheader.js","components/schedule/subtaskdisplay.js","components/schedule/currenttaskdisplay.js","components/schedule/booleandisplay.js","components/schedule/booleanlist.js","components/schedule/upcominglist.js","components/schedule/daynotes.js","components/schedule/schedulemain.js","App.js","serviceWorker.js","index.js"],"names":["booleanReducer","state","action","type","boolName","bool","bID","Math","floor","random","pID","isComplete","index","findIndex","value","filter","dateConv","time","today","Date","setHours","Number","substring","setMinutes","disp12Time","timeString","hours","isToday","date","localStorage","getItem","oldDate","getMonth","getDay","getFullYear","setItem","toDateString","console","log","BooleanContext","createContext","BooleanContextProvider","props","useReducer","localData","JSON","parse","bools","boolsDispatch","useEffect","stringify","Provider","children","DayPresetReducer","presetName","preset","taskList","presetTasks","dpID","DayPresetContext","DayPresetContextProvider","dayPresets","dayDispatch","scheduleReducer","task","tID","taskName","startTime","endTime","taskNotes","isCurrent","subtasks","sort","a","b","hoursA","hoursB","minutesA","minutesB","insertByTime","tasks","ind","note","i","length","stIDcheck","sub","stID","stIndex","ScheduleContext","ScheduleContextProvider","dispatch","CreationSelection","useContext","className","onClick","e","preventDefault","deleteSelection","selectionname","CreationSelectionInput","useState","setName","onSubmit","placeholder","name","onChange","target","required","DayNotesContext","DayNotesContextProvider","initNote","jsonNote","setNote","editNote","newNote","SwipeButton","addClass","id","CreationSidebar","Fragment","map","key","list","swapTasks","sb","document","getElementById","classList","remove","parentNode","add","hideSidebar","cols","rows","defaultValue","TaskBlock","st","stName","SchedulePreview","bar","upbutt","style","display","revealSidebar","CheckBox","SubtaskPreview","subtask","stType","indic","setIndic","goal","indicVal","setIndicVal","checked","min","max","TaskCreator","setStartTime","setEndTime","setNotes","setSubtasks","setstName","hider","x","thisOne","getElementsByClassName","thistwo","thisthree","thisone","matches","contains","window","matchMedia","addListener","htmlFor","pattern","class","onLoad","revealCreator","BackHeader","to","Main","ScheduleHeader","todayTime","getHours","toString","padStart","getMinutes","percent","total","width","SubtaskDisplay","setValue","classes","key2","CurrentDisplay","currentIndex","curr","tid","currentName","markText","change","BooleanDisplay","bName","BooleanList","notes","unswapBottom","UpcomingList","DayNotes","swapBottom","ScheduleMain","setDate","boolist","uplist","curtask","dayNo","timerID","setInterval","clearInterval","addEventListener","App","baseline","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e665bc8.chunk.js","sourcesContent":["export const booleanReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_BOOL\":\n      return [\n        ...state,\n        {\n          boolName: action.bool.boolName,\n          bID: Math.floor(Math.random() * 900000),\n          pID: 1,\n          isComplete: false,\n        },\n      ];\n    case \"TOGGLE_BOOL\":\n      let index = state.findIndex((bool) => bool.bID == action.bool.bool.bID);\n\n      state[index].isComplete = !action.bool.value\n      return [...state];\n    case \"REMOVE_BOOL\":\n      return state.filter((bool) => bool.bID !== action.bID);\n    default:\n      return state;\n  }\n};\n// Add Complete_bool\n","export const dateConv = (time) => {\n  let today = new Date();\n  today.setHours(Number(time.substring(0, 2)));\n  today.setMinutes(Number(time.substring(3, 5)));\n  return today;\n};\nexport const disp12Time = (timeString) => {\n  let hours = Number(timeString.substring(0, 2));\n  if (hours > 12) {\n    hours -= 12;\n    let newtime = hours + \":\" + timeString.substring(3, 5) + \"pm\";\n    return newtime;\n  }\n  if (hours == 12) {\n    let newtime = hours + \":\" + timeString.substring(3, 5) + \"pm\";\n    return newtime;\n  }\n  if (hours == 0) {\n    hours = 12;\n  }\n  let newtime = hours + \":\" + timeString.substring(3, 5) + \"am\";\n\n  return newtime;\n};\n\nexport let now = new Date();\n\nexport const isToday = () => {\n  const date = localStorage.getItem(\"date\");\n  let today = new Date();\n  let oldDate = date ? new Date(date) : new Date();\n  if (\n    oldDate.getMonth() < today.getMonth() ||\n    oldDate.getDay() < today.getDay() ||\n    oldDate.getFullYear() < today.getFullYear()\n  ) {\n    localStorage.setItem(\"date\", today.toDateString());\n    console.log(\"Is today false\");\n    return false;\n  } else {\n    console.log(\"Is today true\");\n    localStorage.setItem(\"date\", today.toDateString());\n    return true;\n  }\n};\n","import React, { createContext, useReducer, useEffect } from \"react\";\nimport { booleanReducer } from \"../reducers/booleanreducer\";\nimport { isToday } from \"../components/scripts/shared\";\nexport const BooleanContext = createContext();\n\nconst BooleanContextProvider = (props) => {\n  const [bools, boolsDispatch] = useReducer(booleanReducer, [], () => {\n    const localData = localStorage.getItem(\"bools\");\n    return localData && isToday() ? JSON.parse(localData) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem(\"bools\", JSON.stringify(bools));\n    console.log(`Bools was just set to ${JSON.stringify(bools)}`);\n  }, [bools]);\n  return (\n    <BooleanContext.Provider value={{ bools, boolsDispatch }}>\n      {props.children}\n    </BooleanContext.Provider>\n  );\n};\n\nexport default BooleanContextProvider;\n","export const DayPresetReducer = (state, action) => {\n  //let index = state.findIndex((task) => task.tID == action.task.tID);\n  switch (action.type) {\n    case \"ADD_PRESET\":\n      return (state = [\n        ...state,\n        {\n          presetName: action.preset.presetName,\n          taskList: action.preset.presetTasks,\n          dpID: Math.floor(Math.random() * 900000),\n        },\n      ]);\n\n    case \"REMOVE_PRESET\":\n      return state.filter((preset) => preset.dpID !== action.dpID);\n    case \"RENAME_PRESET\":\n      return [...state];\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useEffect, useState, useReducer } from \"react\";\nimport { DayPresetReducer } from \"../reducers/daypresetreducer\";\nexport const DayPresetContext = createContext();\n\nconst DayPresetContextProvider = (props) => {\n  const [dayPresets, dayDispatch] = useReducer(DayPresetReducer, [], () => {\n    const localData = localStorage.getItem(\"dayPresets\");\n    return localData ? JSON.parse(localData) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem(\"dayPresets\", JSON.stringify(dayPresets));\n    console.log(`dayPresets was just set to ${JSON.stringify(dayPresets)}`);\n  }, [dayPresets]);\n  return (\n    <DayPresetContext.Provider value={{ dayPresets, dayDispatch }}>\n      {props.children}\n    </DayPresetContext.Provider>\n  );\n};\n\nexport default DayPresetContextProvider;\n","import { dateConv, now } from \"../components/scripts/shared\";\n\nexport const scheduleReducer = (state, action) => {\n  let index = state.findIndex((task) => task.tID == action.task.tID);\n  switch (action.type) {\n    case \"ADD_TASK\":\n      return insertByTime(state, action.task);\n    case \"REPLACE_TASKS\":\n      return [...action.tasks];\n    case \"REMOVE_TASK\":\n      return state.filter((task) => task.tID !== action.task.tID);\n    case \"TOGGLE_TASK\":\n      state[index].isComplete = !state[index].isComplete;\n      return [...state];\n    case \"EDIT_TASK_NOTE\":\n      state[action.task.ind].taskNotes = action.task.note;\n      return [...state];\n    case \"MARK_CURRENT\":\n      for (let i = 0; i < state.length; i++) {\n        if (i == index) {\n          state[index].isCurrent = true;\n        } else {\n          state[i].isCurrent = false;\n        }\n      }\n      console.log(\"currentmarked\");\n      return [...state];\n    case \"TOGGLE_SUB\":\n      let stIDcheck = action.task.sub.stID;\n      let stIndex = state[index].subtasks.findIndex(\n        (sub) => sub.stID == stIDcheck\n      );\n      state[index].subtasks[stIndex].isComplete = !action.task.value;\n      return [...state];\n    default:\n      return state;\n  }\n};\n//add and remove SubTasks\n//edit subtasks\nfunction insertByTime(state, task) {\n  state = [\n    ...state,\n    {\n      taskName: task.taskName,\n      tID: Math.floor(Math.random() * 900000),\n      pID: 1,\n      startTime: task.startTime,\n      endTime: task.endTime,\n      isComplete: false,\n      taskNotes: task.taskNotes,\n      isCurrent: false,\n      subtasks: task.subtasks,\n    },\n  ];\n  state.sort(function (a, b) {\n    let hoursA = Number(a.startTime.substring(0, 2));\n    let hoursB = Number(b.startTime.substring(0, 2));\n    let minutesA = Number(a.startTime.substring(3, 5));\n    let minutesB = Number(b.startTime.substring(3, 5));\n\n    if (hoursA < hoursB || (hoursA === hoursB && minutesA < minutesB)) {\n      return -1;\n    }\n    if (hoursB < hoursA) {\n      return 1;\n    }\n\n    return 0;\n  });\n  return [...state];\n}\n","import React, { createContext, useReducer, useEffect } from \"react\";\nimport { scheduleReducer } from \"../reducers/schedulereducer\";\nimport { isToday } from \"../components/scripts/shared\";\n\nexport const ScheduleContext = createContext();\n\nconst ScheduleContextProvider = (props) => {\n  const [tasks, dispatch] = useReducer(scheduleReducer, [], () => {\n    const localData = localStorage.getItem(\"tasks\");\n    //check with an if in here to see if we are on the current day or not\n    //Actually use the function I will make in shared\n\n    return localData && isToday() ? JSON.parse(localData) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    //  console.log(`Tasks was just set to ${JSON.stringify(tasks)}`);\n  }, [tasks]);\n  return (\n    <ScheduleContext.Provider value={{ tasks, dispatch }}>\n      {props.children}\n    </ScheduleContext.Provider>\n  );\n};\n\nexport default ScheduleContextProvider;\n","import React, { useContext } from \"react\";\nimport { BooleanContext } from \"../../contexts/booleancontext\";\nimport { DayPresetContext } from \"../../contexts/daypresetcontext\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\n\nfunction CreationSelection(props) {\n  //Possibly also do one that renames the thing\n  const { boolsDispatch } = useContext(BooleanContext);\n  const { dispatch } = useContext(ScheduleContext);\n  const { dayDispatch } = useContext(DayPresetContext);\n  function deleteSelection(e) {\n    e.preventDefault();\n    if (props.bool) {\n      boolsDispatch({ type: \"REMOVE_BOOL\", bID: props.bool.bID });\n    } else if (props.preset) {\n      dayDispatch({ type: \"REMOVE_PRESET\", dpID: props.preset.dpID });\n    }\n  }\n  return (\n    <div className=\"creationselection\">\n      <button className=\"deletebutton\" onClick={(e) => deleteSelection(e)}>\n        x\n      </button>\n      <p className=\"selectionname\" onClick={props.onClick}>\n        {props.selectionname}\n      </p>\n    </div>\n  );\n}\n\nexport default CreationSelection;\n","import React, { useState, useContext } from \"react\";\nimport { BooleanContext } from \"../../contexts/booleancontext\";\n\nfunction CreationSelectionInput(props) {\n  const { boolsDispatch } = useContext(BooleanContext);\n  const [boolName, setName] = useState(\"\");\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    boolsDispatch({\n      type: \"ADD_BOOL\",\n      bool: {\n        boolName,\n      },\n    });\n    setName(\"\");\n  };\n  return (\n    <div className=\"creationselection\">\n      <form onSubmit={handleSubmit}>\n        <input\n          className=\"selectioninput\"\n          placeholder=\"New\"\n          type=\"text\"\n          name=\"AltAdder\"\n          value={boolName}\n          onChange={(e) => setName(e.target.value)}\n          required\n        />\n        <input type=\"submit\" value=\"+\" className=\"deletebutton\" />\n      </form>\n    </div>\n  );\n}\n\nexport default CreationSelectionInput;\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { isToday } from \"../components/scripts/shared\";\n\nexport const DayNotesContext = createContext();\n\nconst DayNotesContextProvider = (props) => {\n  let initNote = localStorage.getItem(\"note\");\n  let jsonNote =\n    initNote && isToday()\n      ? JSON.parse(initNote)\n      : [{ note: \"Today's Notes: \" }];\n  const [note, setNote] = useState(jsonNote);\n  const editNote = (newNote) => {\n    setNote([{ note: newNote }]);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"note\", JSON.stringify(note));\n  }, [note]);\n  return (\n    <DayNotesContext.Provider value={{ note, editNote }}>\n      {props.children}\n    </DayNotesContext.Provider>\n  );\n};\n\nexport default DayNotesContextProvider;\n","import React from \"react\";\n\nfunction SwipeButton(props) {\n  return (\n    <div\n      className={`swipeButton ${props.addClass}`}\n      onClick={props.onClick}\n      id={props.id}\n    >\n      <span className=\"swbt\">»</span>\n    </div>\n  );\n}\n\nexport default SwipeButton;\n","import React, { useContext } from \"react\";\nimport CreationSelection from \"./creationselection\";\nimport CreationSelectionInput from \"./creationselectioninput\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport { BooleanContext } from \"../../contexts/booleancontext\";\nimport { DayNotesContext } from \"../../contexts/daynotescontext\";\nimport { DayPresetContext } from \"../../contexts/daypresetcontext\";\nimport SwipeButton from \"../swipebutton\";\n\nfunction CreationSidebar() {\n  const { tasks, dispatch } = useContext(ScheduleContext);\n  const { bools } = useContext(BooleanContext);\n  const { dayPresets, dayDispatch } = useContext(DayPresetContext);\n  const { note, editNote } = useContext(DayNotesContext);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dayDispatch({\n      type: \"ADD_PRESET\",\n      preset: {\n        presetName: new Date().toDateString(),\n        presetTasks: tasks,\n      },\n    });\n  };\n  const swapTasks = (e, list) => {\n    e.preventDefault();\n    dispatch({\n      type: \"REPLACE_TASKS\",\n      tasks: list,\n      task: 0,\n    });\n  };\n  const hideSidebar = (a) => {\n    let sb = document.getElementById(\"schedPreSB\");\n    let upbutt = document.getElementById(\"createrReveal\");\n    upbutt.classList.remove(\"hide\");\n    a.target.parentNode.parentNode.parentNode.classList.add(\"hide\");\n    sb.classList.remove(\"hide\");\n  };\n  return (\n    <React.Fragment>\n      <div className=\"sidebar\" id=\"creationsidebar\">\n        <div id=\"sideScroller\">\n          <div className=\"sidebarlabel\">\n            <p className=\"lighttext\">Preset Schedules:</p>\n            <div className=\"sidebarlist\">\n              {dayPresets.map((preset) => {\n                return (\n                  <CreationSelection\n                    selectionname={preset.presetName}\n                    preset={preset}\n                    key={preset.dpID}\n                    onClick={(e) => {\n                      swapTasks(e, preset.taskList);\n                    }}\n                  />\n                );\n              })}\n            </div>\n            <button id=\"createpresetbutton\" onClick={handleSubmit}>\n              Create Preset From Current\n            </button>\n          </div>\n          {/*\n     <div className=\"sidebarlabel\">\n            <p className=\"lighttext\">Preset Tasks:</p>\n            <div className=\"sidebarlist\">\n              <ul>\n                {tasks.map((task) => {\n                  return (\n                    <CreationSelection\n                      selectionname={task.taskName}\n                      key={task.tID}\n                    />\n                  );\n                })}\n              </ul>\n\n              <CreationSelectionInput action=\"ADD_PRESET\" />\n            </div>\n          </div>\n    */}\n          <SwipeButton id=\"cSideHide\" onClick={(a) => hideSidebar(a)} />\n          <div className=\"sidebarlabel\">\n            <p className=\"lighttext\">Un-Timed Tasks:</p>\n            <div className=\"sidebarlist\">\n              {bools[0] ? (\n                <ul>\n                  {bools.map((bool) => {\n                    return (\n                      <CreationSelection\n                        selectionname={bool.boolName}\n                        key={bool.bID}\n                        bool={bool}\n                      />\n                    );\n                  })}\n                </ul>\n              ) : null}\n              <CreationSelectionInput action=\"ADD_BOOl\" />\n            </div>\n          </div>\n          <textarea\n            cols=\"28\"\n            rows=\"6\"\n            className=\"dayNotes\"\n            onChange={(e) => editNote(e.target.value)}\n            defaultValue={note[0] ? note[0].note : null}\n          ></textarea>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default CreationSidebar;\n","import React, { useContext } from \"react\";\nimport { ScheduleContext } from \"../contexts/schedulecontext\";\nimport { disp12Time } from \"./scripts/shared\";\n\nfunction TaskBlock({ task }) {\n  const { dispatch } = useContext(ScheduleContext);\n  return task ? (\n    <div className=\"taskblock\">\n      <button\n        className=\"deletebutton\"\n        onClick={() =>\n          dispatch({ type: \"REMOVE_TASK\", task: { tID: task.tID } })\n        }\n      >\n        x\n      </button>\n      <p className=\"taskname\">{task.taskName}</p>\n      <div className=\"time\">\n        <p className=\"stime\">{disp12Time(task.startTime)}</p>\n        <p>{disp12Time(task.endTime)}</p>\n      </div>\n      {task.subtasks[0] ? (\n        <div className=\"subtask\">\n          <ul className=\"subBarList\">\n            <span className=\"subBar\" key={Math.floor(Math.random() * 900000)}>\n              {task.subtasks.map((st) => {\n                {\n                  return (\n                    <span\n                      className=\"subBarName\"\n                      key={Math.floor(Math.random() * 900000)}\n                    >\n                      {st.stName}\n                      {\"\\t\"}\n                    </span>\n                  );\n                }\n              })}\n            </span>\n          </ul>\n        </div>\n      ) : null}\n    </div>\n  ) : null;\n}\n\nexport default TaskBlock;\n","import React, { useContext } from \"react\";\nimport TaskBlock from \"../taskblock\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport SwipeButton from \"../swipebutton\";\n\nconst SchedulePreview = (e) => {\n  const { tasks } = useContext(ScheduleContext);\n  const revealSidebar = (a) => {\n    let bar = document.getElementById(\"creationsidebar\");\n    let upbutt = document.getElementById(\"createrReveal\");\n    bar.classList.remove(\"hide\");\n    bar.style.display = \"block\";\n    a.target.parentNode.classList.add(\"hide\");\n    upbutt.classList.add(\"hide\");\n  };\n  return (\n    <div className=\"schedulepreviewcontainer\">\n      <div className=\"schedulepreview\">\n        <ul id=\"previewlist\">\n          {tasks.map((task) => {\n            return <TaskBlock task={task} key={task.tID} />;\n          })}\n        </ul>\n      </div>\n      <SwipeButton\n        id=\"schedPreSB\"\n        addClass=\"left sp\"\n        onClick={(a) => revealSidebar(a)}\n      />\n    </div>\n  );\n};\n\nexport default SchedulePreview;\n","import React from \"react\";\n\nfunction CheckBox(props) {\n  let check = props.value;\n  const swap = () => {\n    check = props.value;\n    props.onClick();\n  };\n  return (\n    <div\n      className={`checkBox ${props.value ? \"checked\" : \"unchecked\"}`}\n      onClick={swap}\n      id={props.id}\n    >\n      <span className=\"check\">{props.value ? \"✓\" : \"✗\"}</span>\n    </div>\n  );\n}\n\nexport default CheckBox;\n//props\n//on clicked\n//value\n//two colors and switch text\n//Do I even need add class\n","import React, { useContext, useState } from \"react\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport CheckBox from \"../checkbox\";\n\nfunction SubtaskPreview(props) {\n  const { dispatch } = useContext(ScheduleContext);\n  const [name, setName] = useState(props.subtask.stName);\n  const [indic, setIndic] = useState(props.subtask.stType);\n  const [indicVal, setIndicVal] = useState(props.subtask.goal);\n  return (\n    <div className=\"subtaskpreview\">\n      <div className=\"creater of subtasks\">\n        <input\n          className=\"subtasknameinput taskcreationinput\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          type=\"text\"\n        />\n        <label className=\"switch\" id=\"typeselector\">\n          <input\n            type=\"checkbox\"\n            name=\"indication\"\n            onChange={(e) => setIndic(!indic)}\n            className=\"check\"\n            checked={indic}\n          />\n          <span className=\"slider\"></span>\n        </label>\n        {indic ? (\n          <input\n            type=\"number\"\n            name=\"indicval\"\n            onChange={(e) => setIndicVal(e.target.value)}\n            value={indicVal}\n            min={1}\n            max={999}\n          />\n        ) : (\n          <CheckBox\n            type=\"checkbox\"\n            className=\"check\"\n            onClick={() => true}\n            value={false}\n          ></CheckBox>\n        )}\n        <span\n          className=\"stSub\"\n          onClick={() =>\n            dispatch({ type: \"REMOVE_SUB\", stID: props.subtask.stID })\n          }\n        >\n          -\n        </span>\n      </div>\n    </div>\n  );\n}\n//on change edit subtask in scheduleReducer\nexport default SubtaskPreview;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport SubtaskPreview from \"./subtaskcreator\";\nimport SwipeButton from \"../swipebutton\";\nimport CheckBox from \"../checkbox\";\n\nfunction TaskCreator() {\n  const { dispatch } = useContext(ScheduleContext);\n  const [taskName, setName] = useState(\"\");\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [taskNotes, setNotes] = useState(\"\");\n  const [subtasks, setSubtasks] = useState(\"\");\n  const [stName, setstName] = useState(\"\");\n  const [indic, setIndic] = useState(false);\n  const [indicVal, setIndicVal] = useState(2);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch({\n      type: \"ADD_TASK\",\n      task: {\n        taskName,\n        startTime,\n        endTime,\n        taskNotes,\n        subtasks,\n      },\n    });\n    setName(\"\");\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setNotes(\"Notes: \");\n    setSubtasks(\"\");\n    setIndic(false);\n    setIndicVal(2);\n    setstName(\"\");\n  };\n  function hider(x) {\n    let thisOne = document.getElementsByClassName(\n      \"tasknotesinput taskcreationinput\"\n    );\n    let thistwo = document.getElementsByClassName(\"creater\");\n\n    let thisthree = document.getElementsByClassName(\"secondpart\");\n    let thisone = [...thisOne, ...thistwo, ...thisthree];\n    if (x.matches) {\n      for (let i = 0; i < thisone.length; i++) {\n        //console.log(thisone[i]);\n        if (!thisone[i].classList.contains(\"hide\")) {\n          thisone[i].classList.add(\"hide\");\n          //Finish subtask in reducer\n        } else {\n          //thisone[i].classList.remove(\"hide\");\n          //unfinish subtask in reducer\n        }\n      }\n    } else {\n      for (let i = 0; i < thisone.length; i++) {\n        //console.log(thisone[i]);\n        if (thisone[i].classList.contains(\"hide\")) {\n          thisone[i].classList.remove(\"hide\");\n          //Finish subtask in reducer\n        }\n      }\n    }\n  }\n  const revealCreator = (a) => {\n    let thisOne = document.getElementsByClassName(\n      \"tasknotesinput taskcreationinput\"\n    );\n    let thistwo = document.getElementsByClassName(\"creater\");\n\n    let thisthree = document.getElementsByClassName(\"secondpart\");\n    let thisone = [...thisOne, ...thistwo, ...thisthree];\n    if (x.matches && thisone[0].classList.contains(\"hide\")) {\n      for (let i = 0; i < thisone.length; i++) {\n        //  console.log(thisone[i]);\n        if (thisone[i].classList.contains(\"hide\")) {\n          thisone[i].classList.remove(\"hide\");\n          //Finish subtask in reducer\n        } else {\n          //thisone[i].classList.remove(\"hide\");\n          //unfinish subtask in reducer\n        }\n      }\n    } else {\n      for (let i = 0; i < thisone.length; i++) {\n        //console.log(thisone[i]);\n        if (!thisone[i].classList.contains(\"hide\")) {\n          thisone[i].classList.add(\"hide\");\n          //Finish subtask in reducer\n        }\n      }\n    }\n  };\n  let x = window.matchMedia(\"(max-width: 720px)\");\n  // Call listener function at run time\n  x.addListener(hider);\n  useEffect(() => {\n    hider(x);\n  });\n  const addST = (e) => {\n    setSubtasks([\n      ...subtasks,\n      {\n        stName,\n        stType: indic,\n        goal: indicVal,\n        stID: Math.floor(Math.random() * 900000),\n        value: 0,\n        isComplete: false,\n      },\n    ]);\n    setIndic(false);\n    setIndicVal(2);\n    setstName(\"\");\n  };\n  //hh%3Amm <- time format\n  return (\n    <React.Fragment>\n      <form onSubmit={handleSubmit}>\n        <div id=\"taskcreator\">\n          <div className=\"lineup\">\n            <div>\n              <input\n                className=\"tasknameinput taskcreationinput\"\n                placeholder=\"Task Name\"\n                type=\"text\"\n                value={taskName}\n                onChange={(e) => setName(e.target.value)}\n                name=\"taskName\"\n                required\n              />\n              <label id=\"tasknamelabel\" htmlFor=\"taskName\">\n                Task Name\n              </label>\n            </div>\n            <div id=\"timeinput\" className=\"double\">\n              <div>\n                <label htmlFor=\"starttime\" className=\"timeLabel\">\n                  Start Time\n                </label>\n                <input\n                  className=\"taskcreationinput timeinput\"\n                  type=\"time\"\n                  name=\"starttime\"\n                  onChange={(e) => setStartTime(e.target.value)}\n                  value={startTime}\n                  pattern=\"[0-9]{2}:[0-9]{2}\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"endtime\" className=\"timeLabel\">\n                  End Time\n                </label>\n                <input\n                  className=\"taskcreationinput timeinput\"\n                  type=\"time\"\n                  name=\"endtime\"\n                  onChange={(e) => setEndTime(e.target.value)}\n                  value={endTime}\n                  pattern=\"[0-9]{2}:[0-9]{2}\"\n                  min={startTime}\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"stlist\">\n              {subtasks[0] ? (\n                <ul>\n                  {subtasks.map((sub) => {\n                    return (\n                      <SubtaskPreview\n                        stName={sub.stName}\n                        key={sub.stID}\n                        subtask={sub}\n                      />\n                    );\n                  })}\n                </ul>\n              ) : null}\n            </div>\n            <div>\n              <input\n                className=\"subtasknameinput taskcreationinput creater\"\n                placeholder=\"Subtask Name\"\n                type=\"text\"\n                onChange={(e) => setstName(e.target.value)}\n                value={stName}\n                name=\"subTaskName\"\n              />\n              <label class=\"subtasknamelabel\" htmlFor=\"subTaskName\">\n                Subtask Name\n              </label>\n            </div>\n            <div className=\"secondpart\">\n              <label className=\"switch\" id=\"typeselector\">\n                <input\n                  type=\"checkbox\"\n                  name=\"indication\"\n                  onChange={(e) => setIndic(!indic)}\n                  className=\"check\"\n                  checked={indic}\n                />\n                <span className=\"slider\"></span>\n              </label>\n              {indic ? (\n                <input\n                  type=\"number\"\n                  name=\"indicval\"\n                  onChange={(e) => setIndicVal(e.target.value)}\n                  value={indicVal}\n                  min={1}\n                  max={999}\n                />\n              ) : (\n                <CheckBox\n                  type=\"checkbox\"\n                  className=\"check\"\n                  onClick={() => true}\n                  value={false}\n                ></CheckBox>\n              )}\n              <span onClick={addST} className=\"stSub\">\n                +\n              </span>\n            </div>\n          </div>\n          <textarea\n            onLoad={() => hider(window.matchMedia(\"(max-width: 860px)\"))}\n            cols=\"28\"\n            rows=\"5\"\n            className=\"tasknotesinput taskcreationinput\"\n            onChange={(e) => setNotes(e.target.value)}\n            value={taskNotes}\n          ></textarea>\n\n          <input type=\"submit\" value=\"+\" id=\"creatoradd\" />\n        </div>\n      </form>\n      <SwipeButton\n        id=\"createrReveal\"\n        addClass=\"mid\"\n        onClick={(a) => revealCreator(a)}\n      ></SwipeButton>\n    </React.Fragment>\n  );\n}\n\nexport default TaskCreator;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction BackHeader() {\n  let today = new Date();\n  today = today.toDateString();\n  return (\n    <div className=\"backheader\">\n      <span id=\"topDate\">{today}</span>\n      <Link className=\"right topLink\" to=\"/dayschedule\">\n        Schedule\n      </Link>\n    </div>\n  );\n}\n\nexport default BackHeader;\n","import React from \"react\";\nimport CreationSidebar from \"./creationsidebar\";\nimport SchedulePreview from \"./schedulepreview\";\nimport TaskCreator from \"./taskcreator\";\nimport BackHeader from \"../backheader\";\nimport ScheduleContextProvider from \"../../contexts/schedulecontext\";\nimport DayNotesContextProvider from \"../../contexts/daynotescontext\";\nimport BooleanContextProvider from \"../../contexts/booleancontext\";\nimport DayPresetContextProvider from \"../../contexts/daypresetcontext\";\nfunction Main() {\n  return (\n    <ScheduleContextProvider>\n      <React.Fragment>\n        <div className=\"doubler\">\n          <div>\n            <BooleanContextProvider>\n              <DayNotesContextProvider>\n                <DayPresetContextProvider>\n                  <CreationSidebar />\n                </DayPresetContextProvider>\n              </DayNotesContextProvider>\n            </BooleanContextProvider>\n          </div>\n\n          <div className=\"content\">\n            <BackHeader />\n            <SchedulePreview />\n            <TaskCreator />\n          </div>\n        </div>\n      </React.Fragment>\n    </ScheduleContextProvider>\n  );\n}\n\nexport default Main;\n","import React, { useContext, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport { dateConv, disp12Time } from \"../scripts/shared.js\";\nimport { findCIndex } from \"../scripts/currenttaskscripts\";\n\nfunction ScheduleHeader(props) {\n  const { tasks } = useContext(ScheduleContext);\n  let todayTime = disp12Time(\n    props.time.getHours().toString().padStart(2, \"0\") +\n      \":\" +\n      props.time.getMinutes().toString().padStart(2, \"0\")\n  );\n  let index = tasks.findIndex(\n    (task) =>\n      dateConv(task.startTime).setMinutes(\n        dateConv(task.startTime).getMinutes() - 1\n      ) <= props.time && dateConv(task.endTime) >= props.time\n  );\n  let percent = 0;\n  if (tasks[index]) {\n    let total =\n      dateConv(tasks[index].endTime) -\n      dateConv(tasks[index].startTime).setMinutes(\n        dateConv(tasks[index].startTime).getMinutes() - 1\n      );\n    let part =\n      props.time -\n      dateConv(tasks[index].startTime).setMinutes(\n        dateConv(tasks[index].startTime).getMinutes() - 1\n      );\n    percent = (part / total) * 100;\n  }\n  return (\n    <React.Fragment>\n      <div className=\"scheduleheader\">\n        <div className=\"timegroup\">\n          <span id=\"stime\">\n            {tasks[index] ? disp12Time(tasks[index].startTime) : \"\"}\n          </span>\n          <span id=\"currenttimedisplay\">{todayTime}</span>\n          <span id=\"etime\">\n            {tasks[index] ? disp12Time(tasks[index].endTime) : \"\"}\n          </span>\n        </div>\n        <div className=\"baseline\">\n          <span>{props.time.toDateString()}</span>\n          <Link className=\"right\" to=\"/\">\n            Schedule Creator\n          </Link>\n        </div>\n        <div id=\"progressbar\">\n          <div id=\"progress\" style={{ width: `${percent}%` }}></div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n//\nexport default ScheduleHeader;\n","import React, { useContext, useState } from \"react\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport CheckBox from \"../checkbox\";\n\nfunction SubtaskDisplay(props) {\n  const { dispatch } = useContext(ScheduleContext);\n  const [value, setValue] = useState(props.sub.value);\n  let classes = \"subtaskdisplay\" + (props.sub.isComplete ? \" finished\" : \"\");\n  //Actually Change in Reducer with an edit subtask action\n  function flipCheck() {\n    dispatch({\n      type: \"TOGGLE_SUB\",\n      task: {\n        sub: props.sub,\n        tID: props.task.tID,\n        value: props.sub.isComplete,\n      },\n    });\n    classes = \"subtaskdisplay\" + (props.sub.isComplete ? \" finished\" : \"\");\n  }\n  return (\n    <div className={classes} key={props.sub.stID} key2={props.sub.stID}>\n      <CheckBox\n        type=\"checkbox\"\n        className=\"check\"\n        onClick={flipCheck}\n        value={props.sub.isComplete}\n      ></CheckBox>\n      <p>{props.stName}</p>\n\n      {props.sub.stType ? (\n        <div>\n          <input\n            type=\"number\"\n            name=\"indicval\"\n            onChange={(e) => setValue(e.target.value)}\n            value={value ? value : 0}\n            min={0}\n            max={props.sub.goal}\n          />\n\n          <span>/{props.sub.goal}</span>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default SubtaskDisplay;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport SubtaskDisplay from \"./subtaskdisplay\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport SwipeButton from \"../swipebutton\";\nimport { dateConv } from \"../scripts/shared\";\nimport { findCIndex } from \"../scripts/currenttaskscripts\";\n//probably gotta fix the swap top to get it working\nconst swapTop = () => {\n  let list = document.getElementById(\"upcominglist\");\n  list.classList.remove(\"hide\");\n  let curr = document.getElementById(\"currentdisplay\");\n  curr.classList.add(\"hide\");\n};\n\nfunction CurrentDisplay(props) {\n  const { tasks, dispatch } = useContext(ScheduleContext);\n  let currentIndex = tasks.findIndex(\n    (task) =>\n      dateConv(task.startTime).setMinutes(\n        dateConv(task.startTime).getMinutes() - 1\n      ) <= props.time && dateConv(task.endTime) >= props.time\n  );\n\n  const [note, setNote] = useState(\n    currentIndex >= 0 ? tasks[currentIndex.taskNotes] : \"\"\n  );\n\n  const updateNote = (change) => {\n    setNote(change);\n    dispatch({\n      type: \"EDIT_TASK_NOTE\",\n      task: {\n        note: note,\n        ind: currentIndex,\n      },\n    });\n  };\n  function markText() {\n    let currentName = document.getElementById(\"currentdisplayname\");\n    if (currentName.className == \"\") {\n      currentName.className = \"finished\";\n    } else {\n      currentName.className = \"\";\n    }\n  }\n  const toggleTask = (tid) => {\n    console.log(tid);\n    dispatch({\n      type: \"TOGGLE_TASK\",\n      task: {\n        tID: tid,\n      },\n    });\n  };\n  if (currentIndex >= 0) {\n    let curr = document.getElementById(\"currentdisplay\");\n    if (!tasks[currentIndex].subtasks && curr) {\n      curr.classList.add(\"noSub\");\n    } else if (curr) {\n      curr.classList.remove(\"noSub\");\n    }\n  }\n  return (\n    <div id=\"currentdisplay\" className=\"noSub\">\n      <div id=\"currenttasktop\">\n        <ul className=\"inline\">\n          <h1\n            id=\"currentdisplayname\"\n            className={\n              tasks[currentIndex]\n                ? tasks[currentIndex].isComplete\n                  ? \"finished\"\n                  : \"\"\n                : \"\"\n            }\n          >\n            {tasks[currentIndex] ? tasks[currentIndex].taskName : \"Break\"}\n          </h1>\n        </ul>\n        {currentIndex >= 0 ? (\n          <button\n            id=\"nexttaskbutt\"\n            onClick={() => {\n              markText();\n              toggleTask(tasks[currentIndex].tID);\n\n              console.log(\"toggle clicked\");\n            }}\n          >\n            Mark Complete\n          </button>\n        ) : null}\n      </div>\n      <div id=\"currentdiplaysub\">\n        {currentIndex >= 0\n          ? tasks[currentIndex].subtasks\n            ? tasks[currentIndex].subtasks.map((subtask) => {\n                return (\n                  <SubtaskDisplay\n                    sub={subtask}\n                    key={subtask.stID}\n                    stName={subtask.stName}\n                    task={tasks[currentIndex]}\n                  />\n                );\n              })\n            : null\n          : null}\n      </div>\n      <div id=\"currentdisplaynotes\">\n        <textarea\n          className=\"dayNotes fillup\"\n          defaultValue={\n            tasks[currentIndex] ? tasks[currentIndex].taskNotes : \"Task Notes:\"\n          }\n          onChange={\n            currentIndex >= 0 ? (e) => updateNote(e.target.value) : null\n          }\n        ></textarea>\n      </div>\n      <SwipeButton onClick={() => swapTop()} addClass=\"right\" />\n    </div>\n  );\n}\n// setInterval(CurrentDisplay(), 1000);\nexport default CurrentDisplay;\n","import React, { useContext, useState } from \"react\";\nimport { BooleanContext } from \"../../contexts/booleancontext\";\nimport CheckBox from \"../checkbox\";\n\nfunction BooleanDisplay(props) {\n  const { boolsDispatch } = useContext(BooleanContext);\n  let classes = \"subtaskdisplay\" + (props.bool.isComplete ? \" finished\" : \"\");\n\n  function flipCheck() {\n    boolsDispatch({\n      type: \"TOGGLE_BOOL\",\n      bool: {\n        bool: props.bool,\n        value: props.bool.isComplete,\n      },\n    });\n    classes = \"subtaskdisplay\" + (props.bool.isComplete ? \" finished\" : \"\");\n  }\n  return (\n    <div className={classes} key={props.bID} key2={props.bID}>\n      <CheckBox\n        type=\"checkbox\"\n        className=\"check\"\n        onClick={flipCheck}\n        value={props.bool.isComplete}\n      ></CheckBox>\n      <p className=\"selectionname\">{props.bName}</p>\n    </div>\n  );\n}\n\nexport default BooleanDisplay;\n","import React, { useContext } from \"react\";\nimport BooleanDisplay from \"./booleandisplay\";\nimport { BooleanContext } from \"../../contexts/booleancontext\";\nimport SwipeButton from \"../swipebutton\";\n\nfunction BooleanList() {\n  const { bools } = useContext(BooleanContext);\n  const unswapBottom = () => {\n    let list = document.getElementById(\"booleanlist\");\n    list.classList.add(\"hide\");\n    let notes = document.getElementsByClassName(\"dn\");\n    notes[0].classList.remove(\"hide\");\n    notes[1].classList.remove(\"hide\");\n  };\n  return (\n    <div id=\"booleanlist\" className=\"scroll\">\n      {bools[0] ? (\n        <ul>\n          {bools.map((bool) => {\n            return (\n              <BooleanDisplay\n                bool={bool}\n                bName={bool.boolName}\n                key={bool.bID}\n                key2={bool.bID}\n              />\n            );\n          })}\n        </ul>\n      ) : null}\n      <SwipeButton\n        addClass={\"left boolswipebutt\"}\n        onClick={() => unswapBottom()}\n      />\n    </div>\n  );\n}\n\nexport default BooleanList;\n","import React, { useContext } from \"react\";\nimport TaskBlock from \"../taskblock\";\nimport { ScheduleContext } from \"../../contexts/schedulecontext\";\nimport { dateConv } from \"../scripts/shared\";\nimport SwipeButton from \"../swipebutton\";\n\nfunction UpcomingList(props) {\n  const { tasks } = useContext(ScheduleContext);\n  const unswapTop = () => {\n    let list = document.getElementById(\"upcominglist\");\n    list.classList.add(\"hide\");\n    let curr = document.getElementById(\"currentdisplay\");\n    curr.classList.remove(\"hide\");\n  };\n  return (\n    <div id=\"upcominglist\" className=\"scroll\">\n      <h3 className=\"lightlabel\">Coming Up:</h3>\n      {tasks[0] ? (\n        <ul className=\"scroll\">\n          {tasks.map((task) => {\n            return dateConv(task.startTime).setMinutes(\n              dateConv(task.startTime).getMinutes() - 1\n            ) > props.time ? (\n              <TaskBlock task={task} key={task.tID} />\n            ) : null;\n          })}\n        </ul>\n      ) : null}\n      <SwipeButton addClass=\"left upswipebutt\" onClick={() => unswapTop()} />\n    </div>\n  );\n}\n\nexport default UpcomingList;\n","import React, { useContext } from \"react\";\nimport { DayNotesContext } from \"../../contexts/daynotescontext\";\nimport SwipeButton from \"../swipebutton\";\n\nfunction DayNotes(props) {\n  const { note, editNote } = useContext(DayNotesContext);\n\n  const swapBottom = () => {\n    let list = document.getElementById(\"booleanlist\");\n    list.classList.remove(\"hide\");\n    let notes = document.getElementsByClassName(\"dn\");\n    notes[0].classList.add(\"hide\");\n    notes[1].classList.add(\"hide\");\n  };\n\n  return (\n    <React.Fragment>\n      <textarea\n        id=\"daynotes\"\n        className=\"dn\"\n        onChange={(e) => editNote(e.target.value)}\n        defaultValue={note[0] ? note[0].note : null}\n      ></textarea>\n      <SwipeButton onClick={() => swapBottom()} addClass=\"right dn\" />\n    </React.Fragment>\n  );\n}\n\nexport default DayNotes;\n","import React, { useEffect, useState } from \"react\";\nimport ScheduleHeader from \"./scheduleheader\";\nimport CurrentDisplay from \"./currenttaskdisplay\";\nimport BooleanList from \"./booleanlist\";\nimport UpcomingList from \"./upcominglist\";\nimport DayNotes from \"./daynotes\";\nimport ScheduleContextProvider from \"../../contexts/schedulecontext\";\nimport DayNotesContextProvider from \"../../contexts/daynotescontext\";\nimport BooleanContextProvider from \"../../contexts/booleancontext\";\n\nfunction ScheduleMain() {\n  /////////\n  //Do the functional Cock here\n  ////////\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    let timerID = setInterval(() => tick(), 1000);\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  });\n\n  function tick() {\n    setDate(new Date());\n  }\n  function hider(x) {\n    let boolist = document.getElementById(\"booleanlist\");\n    let uplist = document.getElementById(\"upcominglist\");\n    let curtask = document.getElementById(\"currentdisplay\");\n    let dayNo = document.getElementById(\"daynotes\");\n    //need to get the other things and check that instead\n    let allhidden = document.getElementsByClassName(\"hide\");\n    //console.log(x.matches);\n    if (x.matches && uplist && curtask) {\n      if (\n        !uplist.classList.contains(\"hide\") &&\n        !curtask.classList.contains(\"hide\")\n      ) {\n        uplist.classList.add(\"hide\");\n      }\n    }\n    if (x.matches && dayNo && boolist) {\n      if (\n        !boolist.classList.contains(\"hide\") &&\n        !dayNo.classList.contains(\"hide\")\n      ) {\n        console.log(\"Hide bools\");\n        boolist.classList.add(\"hide\");\n      } else if (dayNo.classList.contains(\"hide\")) {\n        boolist.classList.remove(\"hide\");\n        console.log(\"unhide bools\");\n      } else {\n      }\n    }\n  }\n\n  let x = window.matchMedia(\"(max-width: 720px)\");\n  // Call listener function at run time\n  window.addEventListener(\"resize\", hider(x));\n  useEffect(() => {\n    hider(x);\n  }, []);\n\n  return (\n    <div>\n      <ScheduleContextProvider>\n        <ScheduleHeader time={date} />\n        <div id=\"schedulegrid\">\n          <CurrentDisplay time={date} />\n          <UpcomingList time={date} />\n          <DayNotesContextProvider>\n            <DayNotes time={date} />\n          </DayNotesContextProvider>\n          <BooleanContextProvider>\n            <BooleanList />\n          </BooleanContextProvider>\n        </div>\n      </ScheduleContextProvider>\n    </div>\n  );\n}\n\nexport default ScheduleMain;\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/creation/main.js\";\nimport ScheduleMain from \"./components/schedule/schedulemain.js\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport ScheduleContextProvider from \"./contexts/schedulecontext\";\n\nfunction App() {\n  return (\n    <Router baseline=\"{process.env.PUBLIC_URL + '/'}\">\n      <Switch>\n        <Route path=\"/dayschedule\">\n          <ScheduleContextProvider>\n            <ScheduleMain />\n          </ScheduleContextProvider>\n        </Route>\n        <Route path=\"/\">\n          <ScheduleContextProvider>\n            <Main />\n          </ScheduleContextProvider>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n// <Router>\n//   <Route exact path=\"/\" render={(props) => <Main />} />\n//   <Route exact path=\"/schedule\" render={(props) => <ScheduleMain />} />\n// </Router>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}