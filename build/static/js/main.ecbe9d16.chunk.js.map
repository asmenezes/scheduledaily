{"version":3,"sources":["components/creation/creationsidebar.js","components/creation/schedulepreview.js","components/creation/taskcreator.js","components/backheader.js","components/creation/main.js","App.js","serviceWorker.js","index.js"],"names":["CreationSidebar","Fragment","className","id","SchedulePreview","class","TaskCreator","placeholder","type","for","name","cols","rows","BackHeader","today","Date","toDateString","Main","App","exact","path","render","props","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAyBeA,MAvBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,UAAUC,GAAG,mBAC1B,yBAAKD,UAAU,gBACb,uBAAGA,UAAU,aAAb,qBACA,yBAAKA,UAAU,gBACf,4BAAQC,GAAG,sBAAX,+BAEF,yBAAKD,UAAU,gBACb,uBAAGA,UAAU,aAAb,iBACA,yBAAKA,UAAU,iBAEjB,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,aAAb,mBACA,yBAAKA,UAAU,iBAEjB,yBAAKA,UAAU,gBCPRE,MAVf,WACE,OACE,kBAAC,IAAMH,SAAP,KACE,yBAAKI,MAAM,4BACT,yBAAKA,MAAM,uBC2BJC,MA/Bf,WACE,OACE,kBAAC,IAAML,SAAP,KACE,yBAAKE,GAAG,eACN,2BACED,UAAU,kCACVK,YAAY,YACZC,KAAK,SAEP,2BAAOC,IAAI,cACX,2BACEP,UAAU,8BACVM,KAAK,OACLE,KAAK,cAEP,2BAAOD,IAAI,YACX,2BACEP,UAAU,8BACVM,KAAK,OACLE,KAAK,YAEP,8BAAUC,KAAK,KAAKC,KAAK,IAAIP,MAAM,oCAAnC,UAGA,yBAAKH,UAAU,4BACf,yBAAKA,UAAU,2BCZRW,MAbf,WACE,IAAIC,EAAQ,IAAIC,KAEhB,OADAD,EAAQA,EAAME,eAEZ,kBAAC,IAAMf,SAAP,KACE,yBAAKI,MAAM,cACT,8BAAOS,GACP,0BAAMT,MAAM,SAAZ,gBCcOY,MAjBf,WACE,OACE,kBAAC,IAAMhB,SAAP,KACE,yBAAKI,MAAM,WACT,6BACE,kBAAC,EAAD,OAEF,yBAAKA,MAAM,WACT,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,U,eCHKa,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,GAAGC,OAAQ,SAAAC,GAAK,OAAI,kBAAC,EAAD,WCIxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ecbe9d16.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction CreationSidebar() {\n  return (\n    <React.Fragment>\n      <div className=\"sidebar\" id=\"creationsidebar\">\n        <div className=\"sidebarlabel\">\n          <p className=\"lighttext\">Preset Schedules:</p>\n          <div className=\"sidebarlist\"></div>\n          <button id=\"createpresetbutton\">Create Preset From Current</button>\n        </div>\n        <div className=\"sidebarlabel\">\n          <p className=\"lighttext\">Preset Tasks:</p>\n          <div className=\"sidebarlist\"></div>\n        </div>\n        <div className=\"sidebarlabel\">\n          <p className=\"lighttext\">Un-Times Tasks:</p>\n          <div className=\"sidebarlist\"></div>\n        </div>\n        <div className=\"dayNotes\"></div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default CreationSidebar;\n","import React, {useState} from \"react\";\n\nfunction SchedulePreview() {\n  return (\n    <React.Fragment>\n      <div class=\"schedulepreviewcontainer\">\n        <div class=\"schedulepreview\"></div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default SchedulePreview;\n","import React, { useState } from \"react\";\n\nfunction TaskCreator() {\n  return (\n    <React.Fragment>\n      <div id=\"taskcreator\">\n        <input\n          className=\"tasknameinput taskcreationinput\"\n          placeholder=\"Task Name\"\n          type=\"text\"\n        />\n        <label for=\"starttime\"></label>\n        <input\n          className=\"taskcreationinput timeinput\"\n          type=\"time\"\n          name=\"starttime\"\n        />\n        <label for=\"endtime\"></label>\n        <input\n          className=\"taskcreationinput timeinput\"\n          type=\"time\"\n          name=\"endtime\"\n        />\n        <textarea cols=\"28\" rows=\"6\" class=\"tasknotesinput taskcreationinput\">\n          Notes:\n        </textarea>\n        <div className=\"create list of subtasks\"></div>\n        <div className=\"creater of subtasks\"></div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default TaskCreator;\n","import React, {useState} from \"react\";\n\nfunction BackHeader() {\n  let today = new Date();\n  today = today.toDateString();\n  return (\n    <React.Fragment>\n      <div class=\"backheader\">\n        <span>{today}</span>\n        <span class=\"right\">Dashboard</span>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default BackHeader;\n","import React, {useState} from \"react\";\nimport CreationSidebar from \"./creationsidebar\";\nimport SchedulePreview from \"./schedulepreview\";\nimport TaskCreator from \"./taskcreator\";\nimport BackHeader from \"../backheader\";\n\nfunction Main() {\n  return (\n    <React.Fragment>\n      <div class=\"doubler\">\n        <div>\n          <CreationSidebar />\n        </div>\n        <div class=\"content\">\n          <BackHeader />\n          <SchedulePreview />\n          <TaskCreator />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/creation/main.js\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"\" render={props => <Main />} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}