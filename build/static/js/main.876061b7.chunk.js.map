{"version":3,"sources":["components/creation/creationselection.js","components/creation/creationsidebar.js","components/taskblock.js","components/creation/schedulepreview.js","components/creation/taskcreator.js","components/backheader.js","components/creation/main.js","components/schedule/scheduleheader.js","components/schedule/subtaskdisplay.js","components/schedule/currenttaskdisplay.js","components/schedule/booleanlist.js","components/schedule/upcominglist.js","components/schedule/daynotes.js","components/schedule/schedulemain.js","App.js","serviceWorker.js","index.js"],"names":["CreationSelection","props","className","selectionname","CreationSidebar","Fragment","id","cols","rows","TaskBlock","taskname","starttime","endtime","SchedulePreview","class","TaskCreator","placeholder","type","for","name","BackHeader","today","Date","toDateString","href","Main","ScheduleHeader","SubtaskDisplay","CurrentDisplay","BooleanList","UpcomingList","DayNotes","ScheduleMain","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.876061b7.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nfunction CreationSelection(props) {\n  return <div className= \"creationselection\">\n    <button className = \"deletebutton\">x</button>\n    <p className = \"selectionname\">{props.selectionname}</p>\n  </div>;\n}\n\nexport default CreationSelection;\n","import React, { useState } from \"react\";\nimport CreationSelection from \"./creationselection\";\n\nfunction CreationSidebar() {\n  return (\n    <React.Fragment>\n      <div className=\"sidebar\" id=\"creationsidebar\">\n        <div className=\"sidebarlabel\">\n          <p className=\"lighttext\">Preset Schedules:</p>\n          <div className=\"sidebarlist\">\n            <CreationSelection selectionname={\"Selection\"}/>\n          </div>\n          <button id=\"createpresetbutton\">Create Preset From Current</button>\n        </div>\n        <div className=\"sidebarlabel\">\n          <p className=\"lighttext\">Preset Tasks:</p>\n          <div className=\"sidebarlist\">\n          <CreationSelection selectionname={\"Selection\"}/>\n          </div>\n\n\n        </div>\n        <div className=\"sidebarlabel\">\n          <p className=\"lighttext\">Un-Timed Tasks:</p>\n          <div className=\"sidebarlist\">\n            <CreationSelection selectionname={\"Selection\"}/>\n          </div>\n        </div>\n        <textarea cols=\"28\" rows=\"6\" className=\"dayNotes\">\n          Day Notes: \n        </textarea>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default CreationSidebar;\n","import React, {useState} from \"react\";\n\nfunction TaskBlock(props) {\n  return <div className= \"taskblock\">\n    <button className = \"deletebutton\">x</button>\n    <p className = \"taskname\">{props.taskname}</p>\n    <div className = \"time\">\n    <p className = \"stime\">{props.starttime}</p>\n    <p>{props.endtime}</p>\n    </div>\n    <div className = \"subtask\"><span>SubTasks</span></div>\n  </div>;\n}\n\nexport default TaskBlock;\n","import React, {useState} from \"react\";\nimport TaskBlock from '../taskblock';\n\nfunction SchedulePreview() {\n  return (\n    <React.Fragment>\n      <div class=\"schedulepreviewcontainer\">\n        <div class=\"schedulepreview\">\n        <TaskBlock starttime={\"12:43\"} endtime={\"14:53\"} taskname={\"Do this task\"}/>\n        <TaskBlock starttime={\"1:43\"} endtime={\"4:53\"} taskname={\"Do this task\"}/>\n        <TaskBlock starttime={\"12:43\"} endtime={\"14:53\"} taskname={\"Do this task\"}/>\n        <TaskBlock starttime={\"12:43\"} endtime={\"14:53\"} taskname={\"Do this task\"}/>\n        <TaskBlock starttime={\"12:43\"} endtime={\"14:53\"} taskname={\"Do this task\"}/>\n        <TaskBlock starttime={\"12:43\"} endtime={\"14:53\"} taskname={\"Do this task\"}/>\n        <TaskBlock starttime={\"12:43\"} endtime={\"14:53\"} taskname={\"Do this task\"}/>\n        <TaskBlock starttime={\"12:43\"} endtime={\"14:53\"} taskname={\"Do this task\"}/>\n        <TaskBlock starttime={\"12:43\"} endtime={\"14:53\"} taskname={\"Do this task\"}/>\n        <TaskBlock starttime={\"12:43\"} endtime={\"14:53\"} taskname={\"Do this task\"}/>\n        <TaskBlock starttime={\"12:43\"} endtime={\"14:53\"} taskname={\"Do this task\"}/>\n\n          </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default SchedulePreview;\n","import React, {useState} from \"react\";\n\nfunction TaskCreator() {\n  return (\n    <React.Fragment>\n      <div id=\"taskcreator\">\n        <div class=\"lineup\">\n          <div>\n            <input\n              className=\"tasknameinput taskcreationinput\"\n              placeholder=\"Task Name\"\n              type=\"text\"\n            />\n          </div>\n          <div >\n            <label for=\"starttime\"></label>\n            <input\n              className=\"taskcreationinput timeinput\"\n              type=\"time\"\n              name=\"starttime\"\n            />\n            <label for=\"endtime\"></label>\n            <input\n              className=\"taskcreationinput timeinput\"\n              type=\"time\"\n              name=\"endtime\"\n            />\n          </div>\n          <div>\n            <div className=\"create list of subtasks\"></div>\n            <div className=\"creater of subtasks\">\n              <input\n                className=\"subtasknameinput taskcreationinput\"\n                placeholder=\"Subtask Name\"\n                type=\"text\"\n              />\n\n            </div>\n          </div>\n          <div className=\"secondpart\">\n          <label class=\"switch\" id=\"typeselector\">\n            <input type=\"checkbox\" />\n            <span class=\"slider\"></span>\n          </label>\n        indicator</div>\n        </div>\n        <textarea cols=\"28\" rows=\"5\" class=\"tasknotesinput taskcreationinput\">\n          Notes: \n        </textarea>\n        <div></div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default TaskCreator;\n","import React, {useState} from \"react\";\n\nfunction BackHeader() {\n  let today = new Date();\n  today = today.toDateString();\n  return (\n    <React.Fragment>\n      <div class=\"backheader\">\n        <span>{today}</span>\n        <a className=\"right\" href=\"/schedule\">Schedule</a>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default BackHeader;\n","import React, {useState} from \"react\";\nimport CreationSidebar from \"./creationsidebar\";\nimport SchedulePreview from \"./schedulepreview\";\nimport TaskCreator from \"./taskcreator\";\nimport BackHeader from \"../backheader\";\n\nfunction Main() {\n  return (\n    <React.Fragment>\n      <div class=\"doubler\">\n        <div>\n          <CreationSidebar />\n        </div>\n        <div class=\"content\">\n          <BackHeader />\n          <SchedulePreview />\n          <TaskCreator />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Main;\n","import React, { useState } from 'react';\n\nfunction ScheduleHeader() {\n  let today = new Date();\n  today = today.toDateString();\n  return(\n    <React.Fragment>\n        <div class=\"scheduleheader\">\n        <div className = \"timegroup\">\n          <span>12:00</span>\n          <span id=\"currenttimedisplay\">12:30</span>\n          <span>12:45</span>\n        </div>\n        <div className = \"baseline\">\n          <span>{today}</span>\n          <a className=\"right\" href=\"/\">Schedule Creator</a>\n          </div>\n          <div id = \"progressbar\">\n            <div id = \"progress\">\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n\n}\n\nexport default ScheduleHeader;\n","import React, { useState } from \"react\";\n\nfunction SubtaskDisplay() {\n  return (\n    <div class=\"subtaskdisplay\">\n      <input type=\"checkbox\" class=\"check\" />\n      <p>Subtask Name</p>\n      <p>Indic Placeholder</p>\n    </div>\n  );\n}\n\nexport default SubtaskDisplay;\n","import React, { useState } from \"react\";\nimport SubtaskDisplay from \"./subtaskdisplay\";\n\nfunction CurrentDisplay() {\n  return (\n    <div id=\"currentdisplay\">\n      <div id=\"currenttasktop\">\n        <h1 id=\"currentdisplayname\"> CurrentTask </h1>\n        <button id=\"nexttaskbutt\">Next Task</button>\n      </div>\n      <div id=\"currentdiplaysub\">\n        <SubtaskDisplay />\n        <SubtaskDisplay />\n        <SubtaskDisplay />\n        <SubtaskDisplay />\n      </div>\n      <div id=\"currentdisplaynotes\">\n        <textarea className=\"dayNotes fillup\">Task Notes:</textarea>{\" \"}\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentDisplay;\n","import React, { useState } from \"react\";\nimport SubtaskDisplay from \"./subtaskdisplay\";\n\nfunction BooleanList() {\n  return (\n    <div id=\"booleanlist\">\n      <SubtaskDisplay />\n    </div>\n  );\n}\n\nexport default BooleanList;\n","import React, { useState } from \"react\";\nimport TaskBlock from \"../taskblock\";\n\nfunction UpcomingList() {\n  return (\n    <div id=\"upcominglist\">\n      <h3 className=\"lightlabel\">Upcoming Tasks:</h3>\n      <div className=\"scroll\">\n        <TaskBlock\n          starttime={\"12:43\"}\n          endtime={\"14:53\"}\n          taskname={\"Do this task\"}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default UpcomingList;\n","import React, { useState } from \"react\";\n\nfunction DayNotes() {\n  return <textarea id=\"daynotes\">Day Notes:</textarea>;\n}\n\nexport default DayNotes;\n","import React, { useState } from \"react\";\nimport ScheduleHeader from \"./scheduleheader\";\nimport CurrentDisplay from \"./currenttaskdisplay\";\nimport BooleanList from \"./booleanlist\";\nimport UpcomingList from \"./upcominglist\";\nimport DayNotes from \"./daynotes\";\n\nfunction ScheduleMain() {\n  return (\n    <div>\n      <ScheduleHeader />\n      <div id=\"schedulegrid\">\n        <CurrentDisplay />\n        <UpcomingList />\n        <DayNotes />\n        <BooleanList />\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleMain;\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/creation/main.js\";\nimport ScheduleMain from \"./components/schedule/schedulemain.js\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" render={(props) => <Main />} />\n      <Route exact path=\"/schedule\" render={(props) => <ScheduleMain />} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}